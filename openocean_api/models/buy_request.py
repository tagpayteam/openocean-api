# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openocean_api.configuration import Configuration


class BuyRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sender': 'str',
        'balance_tokens': 'list[SwapItem]',
        'dust_tokens': 'list[str]',
        'buy': 'list[BuyItem]'
    }

    attribute_map = {
        'sender': 'sender',
        'balance_tokens': 'balanceTokens',
        'dust_tokens': 'dustTokens',
        'buy': 'buy'
    }

    def __init__(self, sender=None, balance_tokens=None, dust_tokens=None, buy=None, _configuration=None):  # noqa: E501
        """BuyRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._sender = None
        self._balance_tokens = None
        self._dust_tokens = None
        self._buy = None
        self.discriminator = None

        self.sender = sender
        self.balance_tokens = balance_tokens
        self.dust_tokens = dust_tokens
        self.buy = buy

    @property
    def sender(self):
        """Gets the sender of this BuyRequest.  # noqa: E501

        buyer  # noqa: E501

        :return: The sender of this BuyRequest.  # noqa: E501
        :rtype: str
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this BuyRequest.

        buyer  # noqa: E501

        :param sender: The sender of this BuyRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and sender is None:
            raise ValueError("Invalid value for `sender`, must not be `None`")  # noqa: E501

        self._sender = sender

    @property
    def balance_tokens(self):
        """Gets the balance_tokens of this BuyRequest.  # noqa: E501

        list of paid assets  # noqa: E501

        :return: The balance_tokens of this BuyRequest.  # noqa: E501
        :rtype: list[SwapItem]
        """
        return self._balance_tokens

    @balance_tokens.setter
    def balance_tokens(self, balance_tokens):
        """Sets the balance_tokens of this BuyRequest.

        list of paid assets  # noqa: E501

        :param balance_tokens: The balance_tokens of this BuyRequest.  # noqa: E501
        :type: list[SwapItem]
        """
        if self._configuration.client_side_validation and balance_tokens is None:
            raise ValueError("Invalid value for `balance_tokens`, must not be `None`")  # noqa: E501

        self._balance_tokens = balance_tokens

    @property
    def dust_tokens(self):
        """Gets the dust_tokens of this BuyRequest.  # noqa: E501

        remaining assets reserve token  # noqa: E501

        :return: The dust_tokens of this BuyRequest.  # noqa: E501
        :rtype: list[str]
        """
        return self._dust_tokens

    @dust_tokens.setter
    def dust_tokens(self, dust_tokens):
        """Sets the dust_tokens of this BuyRequest.

        remaining assets reserve token  # noqa: E501

        :param dust_tokens: The dust_tokens of this BuyRequest.  # noqa: E501
        :type: list[str]
        """
        if self._configuration.client_side_validation and dust_tokens is None:
            raise ValueError("Invalid value for `dust_tokens`, must not be `None`")  # noqa: E501

        self._dust_tokens = dust_tokens

    @property
    def buy(self):
        """Gets the buy of this BuyRequest.  # noqa: E501

        order list  # noqa: E501

        :return: The buy of this BuyRequest.  # noqa: E501
        :rtype: list[BuyItem]
        """
        return self._buy

    @buy.setter
    def buy(self, buy):
        """Sets the buy of this BuyRequest.

        order list  # noqa: E501

        :param buy: The buy of this BuyRequest.  # noqa: E501
        :type: list[BuyItem]
        """
        if self._configuration.client_side_validation and buy is None:
            raise ValueError("Invalid value for `buy`, must not be `None`")  # noqa: E501

        self._buy = buy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BuyRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuyRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, BuyRequest):
            return True

        return self.to_dict() != other.to_dict()
