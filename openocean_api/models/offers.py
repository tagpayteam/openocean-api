# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openocean_api.configuration import Configuration


class Offers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contract_address': 'str',
        'collection_slug': 'str',
        'collection_name': 'str',
        'name': 'str',
        'token_id': 'float',
        'token_amount': 'float',
        'amount': 'float',
        'price': 'float',
        'time': 'float',
        'order_type': 'str',
        'market': 'str',
        'on_sale': 'bool',
        'is_collection': 'bool',
        'is_expired': 'bool',
        'schema_name': 'str',
        'floor_price': 'float',
        'image_url': 'str',
        'code': 'str',
        'payment_asset': 'OrderPaymentAsset'
    }

    attribute_map = {
        'contract_address': 'contract_address',
        'collection_slug': 'collection_slug',
        'collection_name': 'collection_name',
        'name': 'name',
        'token_id': 'token_id',
        'token_amount': 'tokenAmount',
        'amount': 'amount',
        'price': 'price',
        'time': 'time',
        'order_type': 'orderType',
        'market': 'market',
        'on_sale': 'on_sale',
        'is_collection': 'isCollection',
        'is_expired': 'isExpired',
        'schema_name': 'schema_name',
        'floor_price': 'floorPrice',
        'image_url': 'image_url',
        'code': 'code',
        'payment_asset': 'paymentAsset'
    }

    def __init__(self, contract_address=None, collection_slug=None, collection_name=None, name=None, token_id=None, token_amount=None, amount=None, price=None, time=None, order_type=None, market=None, on_sale=None, is_collection=None, is_expired=None, schema_name=None, floor_price=None, image_url=None, code=None, payment_asset=None, _configuration=None):  # noqa: E501
        """Offers - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._contract_address = None
        self._collection_slug = None
        self._collection_name = None
        self._name = None
        self._token_id = None
        self._token_amount = None
        self._amount = None
        self._price = None
        self._time = None
        self._order_type = None
        self._market = None
        self._on_sale = None
        self._is_collection = None
        self._is_expired = None
        self._schema_name = None
        self._floor_price = None
        self._image_url = None
        self._code = None
        self._payment_asset = None
        self.discriminator = None

        self.contract_address = contract_address
        self.collection_slug = collection_slug
        self.collection_name = collection_name
        self.name = name
        self.token_id = token_id
        self.token_amount = token_amount
        self.amount = amount
        self.price = price
        self.time = time
        self.order_type = order_type
        self.market = market
        self.on_sale = on_sale
        self.is_collection = is_collection
        self.is_expired = is_expired
        self.schema_name = schema_name
        self.floor_price = floor_price
        self.image_url = image_url
        self.code = code
        self.payment_asset = payment_asset

    @property
    def contract_address(self):
        """Gets the contract_address of this Offers.  # noqa: E501

        collection address  # noqa: E501

        :return: The contract_address of this Offers.  # noqa: E501
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this Offers.

        collection address  # noqa: E501

        :param contract_address: The contract_address of this Offers.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and contract_address is None:
            raise ValueError("Invalid value for `contract_address`, must not be `None`")  # noqa: E501

        self._contract_address = contract_address

    @property
    def collection_slug(self):
        """Gets the collection_slug of this Offers.  # noqa: E501

        collection slug  # noqa: E501

        :return: The collection_slug of this Offers.  # noqa: E501
        :rtype: str
        """
        return self._collection_slug

    @collection_slug.setter
    def collection_slug(self, collection_slug):
        """Sets the collection_slug of this Offers.

        collection slug  # noqa: E501

        :param collection_slug: The collection_slug of this Offers.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and collection_slug is None:
            raise ValueError("Invalid value for `collection_slug`, must not be `None`")  # noqa: E501

        self._collection_slug = collection_slug

    @property
    def collection_name(self):
        """Gets the collection_name of this Offers.  # noqa: E501

        collection name  # noqa: E501

        :return: The collection_name of this Offers.  # noqa: E501
        :rtype: str
        """
        return self._collection_name

    @collection_name.setter
    def collection_name(self, collection_name):
        """Sets the collection_name of this Offers.

        collection name  # noqa: E501

        :param collection_name: The collection_name of this Offers.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and collection_name is None:
            raise ValueError("Invalid value for `collection_name`, must not be `None`")  # noqa: E501

        self._collection_name = collection_name

    @property
    def name(self):
        """Gets the name of this Offers.  # noqa: E501

        nft name  # noqa: E501

        :return: The name of this Offers.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Offers.

        nft name  # noqa: E501

        :param name: The name of this Offers.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def token_id(self):
        """Gets the token_id of this Offers.  # noqa: E501

        nft id  # noqa: E501

        :return: The token_id of this Offers.  # noqa: E501
        :rtype: float
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this Offers.

        nft id  # noqa: E501

        :param token_id: The token_id of this Offers.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and token_id is None:
            raise ValueError("Invalid value for `token_id`, must not be `None`")  # noqa: E501

        self._token_id = token_id

    @property
    def token_amount(self):
        """Gets the token_amount of this Offers.  # noqa: E501

        nft count  # noqa: E501

        :return: The token_amount of this Offers.  # noqa: E501
        :rtype: float
        """
        return self._token_amount

    @token_amount.setter
    def token_amount(self, token_amount):
        """Sets the token_amount of this Offers.

        nft count  # noqa: E501

        :param token_amount: The token_amount of this Offers.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and token_amount is None:
            raise ValueError("Invalid value for `token_amount`, must not be `None`")  # noqa: E501

        self._token_amount = token_amount

    @property
    def amount(self):
        """Gets the amount of this Offers.  # noqa: E501

        offer amount  # noqa: E501

        :return: The amount of this Offers.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this Offers.

        offer amount  # noqa: E501

        :param amount: The amount of this Offers.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def price(self):
        """Gets the price of this Offers.  # noqa: E501

        unit price(decimals)  # noqa: E501

        :return: The price of this Offers.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this Offers.

        unit price(decimals)  # noqa: E501

        :param price: The price of this Offers.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def time(self):
        """Gets the time of this Offers.  # noqa: E501

        end time  # noqa: E501

        :return: The time of this Offers.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this Offers.

        end time  # noqa: E501

        :param time: The time of this Offers.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def order_type(self):
        """Gets the order_type of this Offers.  # noqa: E501

        order type  # noqa: E501

        :return: The order_type of this Offers.  # noqa: E501
        :rtype: str
        """
        return self._order_type

    @order_type.setter
    def order_type(self, order_type):
        """Sets the order_type of this Offers.

        order type  # noqa: E501

        :param order_type: The order_type of this Offers.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and order_type is None:
            raise ValueError("Invalid value for `order_type`, must not be `None`")  # noqa: E501

        self._order_type = order_type

    @property
    def market(self):
        """Gets the market of this Offers.  # noqa: E501

        market  # noqa: E501

        :return: The market of this Offers.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this Offers.

        market  # noqa: E501

        :param market: The market of this Offers.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and market is None:
            raise ValueError("Invalid value for `market`, must not be `None`")  # noqa: E501

        self._market = market

    @property
    def on_sale(self):
        """Gets the on_sale of this Offers.  # noqa: E501

        is on sale  # noqa: E501

        :return: The on_sale of this Offers.  # noqa: E501
        :rtype: bool
        """
        return self._on_sale

    @on_sale.setter
    def on_sale(self, on_sale):
        """Sets the on_sale of this Offers.

        is on sale  # noqa: E501

        :param on_sale: The on_sale of this Offers.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and on_sale is None:
            raise ValueError("Invalid value for `on_sale`, must not be `None`")  # noqa: E501

        self._on_sale = on_sale

    @property
    def is_collection(self):
        """Gets the is_collection of this Offers.  # noqa: E501

        is collection offer  # noqa: E501

        :return: The is_collection of this Offers.  # noqa: E501
        :rtype: bool
        """
        return self._is_collection

    @is_collection.setter
    def is_collection(self, is_collection):
        """Sets the is_collection of this Offers.

        is collection offer  # noqa: E501

        :param is_collection: The is_collection of this Offers.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_collection is None:
            raise ValueError("Invalid value for `is_collection`, must not be `None`")  # noqa: E501

        self._is_collection = is_collection

    @property
    def is_expired(self):
        """Gets the is_expired of this Offers.  # noqa: E501

        is expired  # noqa: E501

        :return: The is_expired of this Offers.  # noqa: E501
        :rtype: bool
        """
        return self._is_expired

    @is_expired.setter
    def is_expired(self, is_expired):
        """Sets the is_expired of this Offers.

        is expired  # noqa: E501

        :param is_expired: The is_expired of this Offers.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_expired is None:
            raise ValueError("Invalid value for `is_expired`, must not be `None`")  # noqa: E501

        self._is_expired = is_expired

    @property
    def schema_name(self):
        """Gets the schema_name of this Offers.  # noqa: E501

        nft type  # noqa: E501

        :return: The schema_name of this Offers.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this Offers.

        nft type  # noqa: E501

        :param schema_name: The schema_name of this Offers.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")  # noqa: E501

        self._schema_name = schema_name

    @property
    def floor_price(self):
        """Gets the floor_price of this Offers.  # noqa: E501

        floor price(decimals)  # noqa: E501

        :return: The floor_price of this Offers.  # noqa: E501
        :rtype: float
        """
        return self._floor_price

    @floor_price.setter
    def floor_price(self, floor_price):
        """Sets the floor_price of this Offers.

        floor price(decimals)  # noqa: E501

        :param floor_price: The floor_price of this Offers.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and floor_price is None:
            raise ValueError("Invalid value for `floor_price`, must not be `None`")  # noqa: E501

        self._floor_price = floor_price

    @property
    def image_url(self):
        """Gets the image_url of this Offers.  # noqa: E501

        nft image  # noqa: E501

        :return: The image_url of this Offers.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Offers.

        nft image  # noqa: E501

        :param image_url: The image_url of this Offers.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def code(self):
        """Gets the code of this Offers.  # noqa: E501

        code  # noqa: E501

        :return: The code of this Offers.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this Offers.

        code  # noqa: E501

        :param code: The code of this Offers.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def payment_asset(self):
        """Gets the payment_asset of this Offers.  # noqa: E501

        pay token info  # noqa: E501

        :return: The payment_asset of this Offers.  # noqa: E501
        :rtype: OrderPaymentAsset
        """
        return self._payment_asset

    @payment_asset.setter
    def payment_asset(self, payment_asset):
        """Sets the payment_asset of this Offers.

        pay token info  # noqa: E501

        :param payment_asset: The payment_asset of this Offers.  # noqa: E501
        :type: OrderPaymentAsset
        """
        if self._configuration.client_side_validation and payment_asset is None:
            raise ValueError("Invalid value for `payment_asset`, must not be `None`")  # noqa: E501

        self._payment_asset = payment_asset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Offers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Offers):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Offers):
            return True

        return self.to_dict() != other.to_dict()
