# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openocean_api.configuration import Configuration


class Rankings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'slug': 'str',
        'name': 'str',
        'image': 'str',
        'primary_contract': 'str',
        'discord_url': 'str',
        'twitter_username': 'str',
        'description': 'str',
        'token_count': 'float',
        'on_sale_count': 'float',
        'floor_ask_price': 'float',
        'floor_price': 'FloorPrice',
        'volume': 'Volume',
        'volume_change': 'Volume',
        'is_verified': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'slug': 'slug',
        'name': 'name',
        'image': 'image',
        'primary_contract': 'primaryContract',
        'discord_url': 'discordUrl',
        'twitter_username': 'twitterUsername',
        'description': 'description',
        'token_count': 'tokenCount',
        'on_sale_count': 'onSaleCount',
        'floor_ask_price': 'floorAskPrice',
        'floor_price': 'floorPrice',
        'volume': 'volume',
        'volume_change': 'volumeChange',
        'is_verified': 'isVerified'
    }

    def __init__(self, id=None, slug=None, name=None, image=None, primary_contract=None, discord_url=None, twitter_username=None, description=None, token_count=None, on_sale_count=None, floor_ask_price=None, floor_price=None, volume=None, volume_change=None, is_verified=None, _configuration=None):  # noqa: E501
        """Rankings - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._slug = None
        self._name = None
        self._image = None
        self._primary_contract = None
        self._discord_url = None
        self._twitter_username = None
        self._description = None
        self._token_count = None
        self._on_sale_count = None
        self._floor_ask_price = None
        self._floor_price = None
        self._volume = None
        self._volume_change = None
        self._is_verified = None
        self.discriminator = None

        self.id = id
        self.slug = slug
        self.name = name
        self.image = image
        self.primary_contract = primary_contract
        self.discord_url = discord_url
        self.twitter_username = twitter_username
        self.description = description
        self.token_count = token_count
        self.on_sale_count = on_sale_count
        self.floor_ask_price = floor_ask_price
        if floor_price is not None:
            self.floor_price = floor_price
        if volume is not None:
            self.volume = volume
        if volume_change is not None:
            self.volume_change = volume_change
        self.is_verified = is_verified

    @property
    def id(self):
        """Gets the id of this Rankings.  # noqa: E501

        id  # noqa: E501

        :return: The id of this Rankings.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Rankings.

        id  # noqa: E501

        :param id: The id of this Rankings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def slug(self):
        """Gets the slug of this Rankings.  # noqa: E501

        slug  # noqa: E501

        :return: The slug of this Rankings.  # noqa: E501
        :rtype: str
        """
        return self._slug

    @slug.setter
    def slug(self, slug):
        """Sets the slug of this Rankings.

        slug  # noqa: E501

        :param slug: The slug of this Rankings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and slug is None:
            raise ValueError("Invalid value for `slug`, must not be `None`")  # noqa: E501

        self._slug = slug

    @property
    def name(self):
        """Gets the name of this Rankings.  # noqa: E501

        name  # noqa: E501

        :return: The name of this Rankings.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Rankings.

        name  # noqa: E501

        :param name: The name of this Rankings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def image(self):
        """Gets the image of this Rankings.  # noqa: E501

        image  # noqa: E501

        :return: The image of this Rankings.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this Rankings.

        image  # noqa: E501

        :param image: The image of this Rankings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def primary_contract(self):
        """Gets the primary_contract of this Rankings.  # noqa: E501

        contract address  # noqa: E501

        :return: The primary_contract of this Rankings.  # noqa: E501
        :rtype: str
        """
        return self._primary_contract

    @primary_contract.setter
    def primary_contract(self, primary_contract):
        """Sets the primary_contract of this Rankings.

        contract address  # noqa: E501

        :param primary_contract: The primary_contract of this Rankings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and primary_contract is None:
            raise ValueError("Invalid value for `primary_contract`, must not be `None`")  # noqa: E501

        self._primary_contract = primary_contract

    @property
    def discord_url(self):
        """Gets the discord_url of this Rankings.  # noqa: E501

        discord  # noqa: E501

        :return: The discord_url of this Rankings.  # noqa: E501
        :rtype: str
        """
        return self._discord_url

    @discord_url.setter
    def discord_url(self, discord_url):
        """Sets the discord_url of this Rankings.

        discord  # noqa: E501

        :param discord_url: The discord_url of this Rankings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and discord_url is None:
            raise ValueError("Invalid value for `discord_url`, must not be `None`")  # noqa: E501

        self._discord_url = discord_url

    @property
    def twitter_username(self):
        """Gets the twitter_username of this Rankings.  # noqa: E501

        twitter  # noqa: E501

        :return: The twitter_username of this Rankings.  # noqa: E501
        :rtype: str
        """
        return self._twitter_username

    @twitter_username.setter
    def twitter_username(self, twitter_username):
        """Sets the twitter_username of this Rankings.

        twitter  # noqa: E501

        :param twitter_username: The twitter_username of this Rankings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and twitter_username is None:
            raise ValueError("Invalid value for `twitter_username`, must not be `None`")  # noqa: E501

        self._twitter_username = twitter_username

    @property
    def description(self):
        """Gets the description of this Rankings.  # noqa: E501

        description  # noqa: E501

        :return: The description of this Rankings.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Rankings.

        description  # noqa: E501

        :param description: The description of this Rankings.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def token_count(self):
        """Gets the token_count of this Rankings.  # noqa: E501

        nft count  # noqa: E501

        :return: The token_count of this Rankings.  # noqa: E501
        :rtype: float
        """
        return self._token_count

    @token_count.setter
    def token_count(self, token_count):
        """Sets the token_count of this Rankings.

        nft count  # noqa: E501

        :param token_count: The token_count of this Rankings.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and token_count is None:
            raise ValueError("Invalid value for `token_count`, must not be `None`")  # noqa: E501

        self._token_count = token_count

    @property
    def on_sale_count(self):
        """Gets the on_sale_count of this Rankings.  # noqa: E501

        nft listing count  # noqa: E501

        :return: The on_sale_count of this Rankings.  # noqa: E501
        :rtype: float
        """
        return self._on_sale_count

    @on_sale_count.setter
    def on_sale_count(self, on_sale_count):
        """Sets the on_sale_count of this Rankings.

        nft listing count  # noqa: E501

        :param on_sale_count: The on_sale_count of this Rankings.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and on_sale_count is None:
            raise ValueError("Invalid value for `on_sale_count`, must not be `None`")  # noqa: E501

        self._on_sale_count = on_sale_count

    @property
    def floor_ask_price(self):
        """Gets the floor_ask_price of this Rankings.  # noqa: E501

        floor price  # noqa: E501

        :return: The floor_ask_price of this Rankings.  # noqa: E501
        :rtype: float
        """
        return self._floor_ask_price

    @floor_ask_price.setter
    def floor_ask_price(self, floor_ask_price):
        """Sets the floor_ask_price of this Rankings.

        floor price  # noqa: E501

        :param floor_ask_price: The floor_ask_price of this Rankings.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and floor_ask_price is None:
            raise ValueError("Invalid value for `floor_ask_price`, must not be `None`")  # noqa: E501

        self._floor_ask_price = floor_ask_price

    @property
    def floor_price(self):
        """Gets the floor_price of this Rankings.  # noqa: E501

        floor price object  # noqa: E501

        :return: The floor_price of this Rankings.  # noqa: E501
        :rtype: FloorPrice
        """
        return self._floor_price

    @floor_price.setter
    def floor_price(self, floor_price):
        """Sets the floor_price of this Rankings.

        floor price object  # noqa: E501

        :param floor_price: The floor_price of this Rankings.  # noqa: E501
        :type: FloorPrice
        """

        self._floor_price = floor_price

    @property
    def volume(self):
        """Gets the volume of this Rankings.  # noqa: E501

        volume  # noqa: E501

        :return: The volume of this Rankings.  # noqa: E501
        :rtype: Volume
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this Rankings.

        volume  # noqa: E501

        :param volume: The volume of this Rankings.  # noqa: E501
        :type: Volume
        """

        self._volume = volume

    @property
    def volume_change(self):
        """Gets the volume_change of this Rankings.  # noqa: E501

        volume  # noqa: E501

        :return: The volume_change of this Rankings.  # noqa: E501
        :rtype: Volume
        """
        return self._volume_change

    @volume_change.setter
    def volume_change(self, volume_change):
        """Sets the volume_change of this Rankings.

        volume  # noqa: E501

        :param volume_change: The volume_change of this Rankings.  # noqa: E501
        :type: Volume
        """

        self._volume_change = volume_change

    @property
    def is_verified(self):
        """Gets the is_verified of this Rankings.  # noqa: E501

        is verified  # noqa: E501

        :return: The is_verified of this Rankings.  # noqa: E501
        :rtype: bool
        """
        return self._is_verified

    @is_verified.setter
    def is_verified(self, is_verified):
        """Sets the is_verified of this Rankings.

        is verified  # noqa: E501

        :param is_verified: The is_verified of this Rankings.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_verified is None:
            raise ValueError("Invalid value for `is_verified`, must not be `None`")  # noqa: E501

        self._is_verified = is_verified

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Rankings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Rankings):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Rankings):
            return True

        return self.to_dict() != other.to_dict()
