# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openocean_api.configuration import Configuration


class SwapQuoteRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'chain': 'str',
        'in_token_address': 'str',
        'out_token_address': 'str',
        'amount': 'str',
        'gas_price': 'str',
        'slippage': 'float',
        'account': 'str'
    }

    attribute_map = {
        'chain': 'chain',
        'in_token_address': 'inTokenAddress',
        'out_token_address': 'outTokenAddress',
        'amount': 'amount',
        'gas_price': 'gasPrice',
        'slippage': 'slippage',
        'account': 'account'
    }

    def __init__(self, chain=None, in_token_address=None, out_token_address=None, amount=None, gas_price=None, slippage=None, account=None, _configuration=None):  # noqa: E501
        """SwapQuoteRequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._chain = None
        self._in_token_address = None
        self._out_token_address = None
        self._amount = None
        self._gas_price = None
        self._slippage = None
        self._account = None
        self.discriminator = None

        self.chain = chain
        self.in_token_address = in_token_address
        self.out_token_address = out_token_address
        self.amount = amount
        self.gas_price = gas_price
        self.slippage = slippage
        self.account = account

    @property
    def chain(self):
        """Gets the chain of this SwapQuoteRequest.  # noqa: E501

        chain code  # noqa: E501

        :return: The chain of this SwapQuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._chain

    @chain.setter
    def chain(self, chain):
        """Sets the chain of this SwapQuoteRequest.

        chain code  # noqa: E501

        :param chain: The chain of this SwapQuoteRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and chain is None:
            raise ValueError("Invalid value for `chain`, must not be `None`")  # noqa: E501
        allowed_values = ["eth", "bsc", "polygon", "avax", "fantom", "optimism", "arbitrum", "okex", "xdai", "heco", "boba", "aurora", "cronos", "harmony", "kava", "solana", "ont", "aptos", "near", "tron"]  # noqa: E501
        if (self._configuration.client_side_validation and
                chain not in allowed_values):
            raise ValueError(
                "Invalid value for `chain` ({0}), must be one of {1}"  # noqa: E501
                .format(chain, allowed_values)
            )

        self._chain = chain

    @property
    def in_token_address(self):
        """Gets the in_token_address of this SwapQuoteRequest.  # noqa: E501

        token address  # noqa: E501

        :return: The in_token_address of this SwapQuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._in_token_address

    @in_token_address.setter
    def in_token_address(self, in_token_address):
        """Sets the in_token_address of this SwapQuoteRequest.

        token address  # noqa: E501

        :param in_token_address: The in_token_address of this SwapQuoteRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and in_token_address is None:
            raise ValueError("Invalid value for `in_token_address`, must not be `None`")  # noqa: E501

        self._in_token_address = in_token_address

    @property
    def out_token_address(self):
        """Gets the out_token_address of this SwapQuoteRequest.  # noqa: E501

        token address  # noqa: E501

        :return: The out_token_address of this SwapQuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._out_token_address

    @out_token_address.setter
    def out_token_address(self, out_token_address):
        """Sets the out_token_address of this SwapQuoteRequest.

        token address  # noqa: E501

        :param out_token_address: The out_token_address of this SwapQuoteRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and out_token_address is None:
            raise ValueError("Invalid value for `out_token_address`, must not be `None`")  # noqa: E501

        self._out_token_address = out_token_address

    @property
    def amount(self):
        """Gets the amount of this SwapQuoteRequest.  # noqa: E501

        token amount  # noqa: E501

        :return: The amount of this SwapQuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this SwapQuoteRequest.

        token amount  # noqa: E501

        :param amount: The amount of this SwapQuoteRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def gas_price(self):
        """Gets the gas_price of this SwapQuoteRequest.  # noqa: E501

        token amount  # noqa: E501

        :return: The gas_price of this SwapQuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._gas_price

    @gas_price.setter
    def gas_price(self, gas_price):
        """Sets the gas_price of this SwapQuoteRequest.

        token amount  # noqa: E501

        :param gas_price: The gas_price of this SwapQuoteRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and gas_price is None:
            raise ValueError("Invalid value for `gas_price`, must not be `None`")  # noqa: E501

        self._gas_price = gas_price

    @property
    def slippage(self):
        """Gets the slippage of this SwapQuoteRequest.  # noqa: E501


        :return: The slippage of this SwapQuoteRequest.  # noqa: E501
        :rtype: float
        """
        return self._slippage

    @slippage.setter
    def slippage(self, slippage):
        """Sets the slippage of this SwapQuoteRequest.


        :param slippage: The slippage of this SwapQuoteRequest.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and slippage is None:
            raise ValueError("Invalid value for `slippage`, must not be `None`")  # noqa: E501

        self._slippage = slippage

    @property
    def account(self):
        """Gets the account of this SwapQuoteRequest.  # noqa: E501

        token address  # noqa: E501

        :return: The account of this SwapQuoteRequest.  # noqa: E501
        :rtype: str
        """
        return self._account

    @account.setter
    def account(self, account):
        """Sets the account of this SwapQuoteRequest.

        token address  # noqa: E501

        :param account: The account of this SwapQuoteRequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and account is None:
            raise ValueError("Invalid value for `account`, must not be `None`")  # noqa: E501

        self._account = account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SwapQuoteRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SwapQuoteRequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, SwapQuoteRequest):
            return True

        return self.to_dict() != other.to_dict()
