# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openocean_api.configuration import Configuration


class Traits(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'key': 'str',
        'kind': 'str',
        'value': 'str',
        'token_count': 'float',
        'on_sale_count': 'float',
        'floor_ask_price': 'float',
        'top_bid_value': 'float',
        'created_at': 'str'
    }

    attribute_map = {
        'key': 'key',
        'kind': 'kind',
        'value': 'value',
        'token_count': 'tokenCount',
        'on_sale_count': 'onSaleCount',
        'floor_ask_price': 'floorAskPrice',
        'top_bid_value': 'topBidValue',
        'created_at': 'createdAt'
    }

    def __init__(self, key=None, kind=None, value=None, token_count=None, on_sale_count=None, floor_ask_price=None, top_bid_value=None, created_at=None, _configuration=None):  # noqa: E501
        """Traits - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._key = None
        self._kind = None
        self._value = None
        self._token_count = None
        self._on_sale_count = None
        self._floor_ask_price = None
        self._top_bid_value = None
        self._created_at = None
        self.discriminator = None

        self.key = key
        self.kind = kind
        self.value = value
        self.token_count = token_count
        self.on_sale_count = on_sale_count
        self.floor_ask_price = floor_ask_price
        if top_bid_value is not None:
            self.top_bid_value = top_bid_value
        self.created_at = created_at

    @property
    def key(self):
        """Gets the key of this Traits.  # noqa: E501

        trait name  # noqa: E501

        :return: The key of this Traits.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this Traits.

        trait name  # noqa: E501

        :param key: The key of this Traits.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def kind(self):
        """Gets the kind of this Traits.  # noqa: E501

        value type  # noqa: E501

        :return: The kind of this Traits.  # noqa: E501
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind):
        """Sets the kind of this Traits.

        value type  # noqa: E501

        :param kind: The kind of this Traits.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def value(self):
        """Gets the value of this Traits.  # noqa: E501

        value  # noqa: E501

        :return: The value of this Traits.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this Traits.

        value  # noqa: E501

        :param value: The value of this Traits.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def token_count(self):
        """Gets the token_count of this Traits.  # noqa: E501

        nft count  # noqa: E501

        :return: The token_count of this Traits.  # noqa: E501
        :rtype: float
        """
        return self._token_count

    @token_count.setter
    def token_count(self, token_count):
        """Sets the token_count of this Traits.

        nft count  # noqa: E501

        :param token_count: The token_count of this Traits.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and token_count is None:
            raise ValueError("Invalid value for `token_count`, must not be `None`")  # noqa: E501

        self._token_count = token_count

    @property
    def on_sale_count(self):
        """Gets the on_sale_count of this Traits.  # noqa: E501

        on sale count  # noqa: E501

        :return: The on_sale_count of this Traits.  # noqa: E501
        :rtype: float
        """
        return self._on_sale_count

    @on_sale_count.setter
    def on_sale_count(self, on_sale_count):
        """Sets the on_sale_count of this Traits.

        on sale count  # noqa: E501

        :param on_sale_count: The on_sale_count of this Traits.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and on_sale_count is None:
            raise ValueError("Invalid value for `on_sale_count`, must not be `None`")  # noqa: E501

        self._on_sale_count = on_sale_count

    @property
    def floor_ask_price(self):
        """Gets the floor_ask_price of this Traits.  # noqa: E501

        floor price  # noqa: E501

        :return: The floor_ask_price of this Traits.  # noqa: E501
        :rtype: float
        """
        return self._floor_ask_price

    @floor_ask_price.setter
    def floor_ask_price(self, floor_ask_price):
        """Sets the floor_ask_price of this Traits.

        floor price  # noqa: E501

        :param floor_ask_price: The floor_ask_price of this Traits.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and floor_ask_price is None:
            raise ValueError("Invalid value for `floor_ask_price`, must not be `None`")  # noqa: E501

        self._floor_ask_price = floor_ask_price

    @property
    def top_bid_value(self):
        """Gets the top_bid_value of this Traits.  # noqa: E501

          # noqa: E501

        :return: The top_bid_value of this Traits.  # noqa: E501
        :rtype: float
        """
        return self._top_bid_value

    @top_bid_value.setter
    def top_bid_value(self, top_bid_value):
        """Sets the top_bid_value of this Traits.

          # noqa: E501

        :param top_bid_value: The top_bid_value of this Traits.  # noqa: E501
        :type: float
        """

        self._top_bid_value = top_bid_value

    @property
    def created_at(self):
        """Gets the created_at of this Traits.  # noqa: E501

          # noqa: E501

        :return: The created_at of this Traits.  # noqa: E501
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Traits.

          # noqa: E501

        :param created_at: The created_at of this Traits.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Traits, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Traits):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Traits):
            return True

        return self.to_dict() != other.to_dict()
