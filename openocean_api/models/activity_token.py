# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openocean_api.configuration import Configuration


class ActivityToken(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'token_address': 'str',
        'token_id': 'float',
        'token_name': 'str',
        'token_image': 'str'
    }

    attribute_map = {
        'token_address': 'tokenAddress',
        'token_id': 'tokenId',
        'token_name': 'tokenName',
        'token_image': 'tokenImage'
    }

    def __init__(self, token_address=None, token_id=None, token_name=None, token_image=None, _configuration=None):  # noqa: E501
        """ActivityToken - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._token_address = None
        self._token_id = None
        self._token_name = None
        self._token_image = None
        self.discriminator = None

        self.token_address = token_address
        self.token_id = token_id
        self.token_name = token_name
        self.token_image = token_image

    @property
    def token_address(self):
        """Gets the token_address of this ActivityToken.  # noqa: E501

        contract address  # noqa: E501

        :return: The token_address of this ActivityToken.  # noqa: E501
        :rtype: str
        """
        return self._token_address

    @token_address.setter
    def token_address(self, token_address):
        """Sets the token_address of this ActivityToken.

        contract address  # noqa: E501

        :param token_address: The token_address of this ActivityToken.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and token_address is None:
            raise ValueError("Invalid value for `token_address`, must not be `None`")  # noqa: E501

        self._token_address = token_address

    @property
    def token_id(self):
        """Gets the token_id of this ActivityToken.  # noqa: E501

        nft id  # noqa: E501

        :return: The token_id of this ActivityToken.  # noqa: E501
        :rtype: float
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this ActivityToken.

        nft id  # noqa: E501

        :param token_id: The token_id of this ActivityToken.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and token_id is None:
            raise ValueError("Invalid value for `token_id`, must not be `None`")  # noqa: E501

        self._token_id = token_id

    @property
    def token_name(self):
        """Gets the token_name of this ActivityToken.  # noqa: E501

        name  # noqa: E501

        :return: The token_name of this ActivityToken.  # noqa: E501
        :rtype: str
        """
        return self._token_name

    @token_name.setter
    def token_name(self, token_name):
        """Sets the token_name of this ActivityToken.

        name  # noqa: E501

        :param token_name: The token_name of this ActivityToken.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and token_name is None:
            raise ValueError("Invalid value for `token_name`, must not be `None`")  # noqa: E501

        self._token_name = token_name

    @property
    def token_image(self):
        """Gets the token_image of this ActivityToken.  # noqa: E501

        image  # noqa: E501

        :return: The token_image of this ActivityToken.  # noqa: E501
        :rtype: str
        """
        return self._token_image

    @token_image.setter
    def token_image(self, token_image):
        """Sets the token_image of this ActivityToken.

        image  # noqa: E501

        :param token_image: The token_image of this ActivityToken.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and token_image is None:
            raise ValueError("Invalid value for `token_image`, must not be `None`")  # noqa: E501

        self._token_image = token_image

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityToken, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityToken):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActivityToken):
            return True

        return self.to_dict() != other.to_dict()
