# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openocean_api.configuration import Configuration


class OrderPaymentAsset(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'symbol': 'str',
        'address': 'str',
        'image': 'str',
        'decimals': 'float'
    }

    attribute_map = {
        'symbol': 'symbol',
        'address': 'address',
        'image': 'image',
        'decimals': 'decimals'
    }

    def __init__(self, symbol=None, address=None, image=None, decimals=None, _configuration=None):  # noqa: E501
        """OrderPaymentAsset - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._symbol = None
        self._address = None
        self._image = None
        self._decimals = None
        self.discriminator = None

        self.symbol = symbol
        self.address = address
        self.image = image
        self.decimals = decimals

    @property
    def symbol(self):
        """Gets the symbol of this OrderPaymentAsset.  # noqa: E501

        token symbol  # noqa: E501

        :return: The symbol of this OrderPaymentAsset.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this OrderPaymentAsset.

        token symbol  # noqa: E501

        :param symbol: The symbol of this OrderPaymentAsset.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def address(self):
        """Gets the address of this OrderPaymentAsset.  # noqa: E501

        token address  # noqa: E501

        :return: The address of this OrderPaymentAsset.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this OrderPaymentAsset.

        token address  # noqa: E501

        :param address: The address of this OrderPaymentAsset.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and address is None:
            raise ValueError("Invalid value for `address`, must not be `None`")  # noqa: E501

        self._address = address

    @property
    def image(self):
        """Gets the image of this OrderPaymentAsset.  # noqa: E501

        token icon  # noqa: E501

        :return: The image of this OrderPaymentAsset.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this OrderPaymentAsset.

        token icon  # noqa: E501

        :param image: The image of this OrderPaymentAsset.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def decimals(self):
        """Gets the decimals of this OrderPaymentAsset.  # noqa: E501

        decimals  # noqa: E501

        :return: The decimals of this OrderPaymentAsset.  # noqa: E501
        :rtype: float
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals):
        """Sets the decimals of this OrderPaymentAsset.

        decimals  # noqa: E501

        :param decimals: The decimals of this OrderPaymentAsset.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and decimals is None:
            raise ValueError("Invalid value for `decimals`, must not be `None`")  # noqa: E501

        self._decimals = decimals

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrderPaymentAsset, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrderPaymentAsset):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, OrderPaymentAsset):
            return True

        return self.to_dict() != other.to_dict()
