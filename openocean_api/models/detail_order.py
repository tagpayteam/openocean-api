# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openocean_api.configuration import Configuration


class DetailOrder(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'market': 'str',
        'price': 'float',
        'price_usd': 'float',
        'end_at': 'float',
        'amount': 'float',
        'code': 'str',
        'payment_asset': 'OrderPaymentAsset'
    }

    attribute_map = {
        'market': 'market',
        'price': 'price',
        'price_usd': 'priceUsd',
        'end_at': 'end_at',
        'amount': 'amount',
        'code': 'code',
        'payment_asset': 'paymentAsset'
    }

    def __init__(self, market=None, price=None, price_usd=None, end_at=None, amount=None, code=None, payment_asset=None, _configuration=None):  # noqa: E501
        """DetailOrder - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._market = None
        self._price = None
        self._price_usd = None
        self._end_at = None
        self._amount = None
        self._code = None
        self._payment_asset = None
        self.discriminator = None

        self.market = market
        self.price = price
        self.price_usd = price_usd
        self.end_at = end_at
        self.amount = amount
        self.code = code
        self.payment_asset = payment_asset

    @property
    def market(self):
        """Gets the market of this DetailOrder.  # noqa: E501

        market  # noqa: E501

        :return: The market of this DetailOrder.  # noqa: E501
        :rtype: str
        """
        return self._market

    @market.setter
    def market(self, market):
        """Sets the market of this DetailOrder.

        market  # noqa: E501

        :param market: The market of this DetailOrder.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and market is None:
            raise ValueError("Invalid value for `market`, must not be `None`")  # noqa: E501

        self._market = market

    @property
    def price(self):
        """Gets the price of this DetailOrder.  # noqa: E501

        unit price  # noqa: E501

        :return: The price of this DetailOrder.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this DetailOrder.

        unit price  # noqa: E501

        :param price: The price of this DetailOrder.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def price_usd(self):
        """Gets the price_usd of this DetailOrder.  # noqa: E501

        unit price(usd)  # noqa: E501

        :return: The price_usd of this DetailOrder.  # noqa: E501
        :rtype: float
        """
        return self._price_usd

    @price_usd.setter
    def price_usd(self, price_usd):
        """Sets the price_usd of this DetailOrder.

        unit price(usd)  # noqa: E501

        :param price_usd: The price_usd of this DetailOrder.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and price_usd is None:
            raise ValueError("Invalid value for `price_usd`, must not be `None`")  # noqa: E501

        self._price_usd = price_usd

    @property
    def end_at(self):
        """Gets the end_at of this DetailOrder.  # noqa: E501

        end time  # noqa: E501

        :return: The end_at of this DetailOrder.  # noqa: E501
        :rtype: float
        """
        return self._end_at

    @end_at.setter
    def end_at(self, end_at):
        """Sets the end_at of this DetailOrder.

        end time  # noqa: E501

        :param end_at: The end_at of this DetailOrder.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and end_at is None:
            raise ValueError("Invalid value for `end_at`, must not be `None`")  # noqa: E501

        self._end_at = end_at

    @property
    def amount(self):
        """Gets the amount of this DetailOrder.  # noqa: E501

        order quantity  # noqa: E501

        :return: The amount of this DetailOrder.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DetailOrder.

        order quantity  # noqa: E501

        :param amount: The amount of this DetailOrder.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def code(self):
        """Gets the code of this DetailOrder.  # noqa: E501

        code  # noqa: E501

        :return: The code of this DetailOrder.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this DetailOrder.

        code  # noqa: E501

        :param code: The code of this DetailOrder.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def payment_asset(self):
        """Gets the payment_asset of this DetailOrder.  # noqa: E501

        pay token info  # noqa: E501

        :return: The payment_asset of this DetailOrder.  # noqa: E501
        :rtype: OrderPaymentAsset
        """
        return self._payment_asset

    @payment_asset.setter
    def payment_asset(self, payment_asset):
        """Sets the payment_asset of this DetailOrder.

        pay token info  # noqa: E501

        :param payment_asset: The payment_asset of this DetailOrder.  # noqa: E501
        :type: OrderPaymentAsset
        """
        if self._configuration.client_side_validation and payment_asset is None:
            raise ValueError("Invalid value for `payment_asset`, must not be `None`")  # noqa: E501

        self._payment_asset = payment_asset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DetailOrder, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DetailOrder):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DetailOrder):
            return True

        return self.to_dict() != other.to_dict()
