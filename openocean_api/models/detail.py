# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openocean_api.configuration import Configuration


class Detail(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contract_address': 'str',
        'collection': 'Collection',
        'name': 'str',
        'image_url': 'str',
        'schema_name': 'str',
        'symbol': 'str',
        'description': 'str',
        'token_traits': 'list[Traits]',
        'token_id': 'float',
        'payment_assets': 'list[PaymentAssetItem]',
        'is_make_offer': 'bool',
        'owner': 'Owner',
        'is_flagged': 'bool',
        'orders': 'list[DetailOrder]'
    }

    attribute_map = {
        'contract_address': 'contract_address',
        'collection': 'collection',
        'name': 'name',
        'image_url': 'image_url',
        'schema_name': 'schema_name',
        'symbol': 'symbol',
        'description': 'description',
        'token_traits': 'token_traits',
        'token_id': 'token_id',
        'payment_assets': 'paymentAssets',
        'is_make_offer': 'isMakeOffer',
        'owner': 'owner',
        'is_flagged': 'isFlagged',
        'orders': 'orders'
    }

    def __init__(self, contract_address=None, collection=None, name=None, image_url=None, schema_name=None, symbol=None, description=None, token_traits=None, token_id=None, payment_assets=None, is_make_offer=None, owner=None, is_flagged=None, orders=None, _configuration=None):  # noqa: E501
        """Detail - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._contract_address = None
        self._collection = None
        self._name = None
        self._image_url = None
        self._schema_name = None
        self._symbol = None
        self._description = None
        self._token_traits = None
        self._token_id = None
        self._payment_assets = None
        self._is_make_offer = None
        self._owner = None
        self._is_flagged = None
        self._orders = None
        self.discriminator = None

        self.contract_address = contract_address
        self.collection = collection
        self.name = name
        self.image_url = image_url
        self.schema_name = schema_name
        self.symbol = symbol
        self.description = description
        self.token_traits = token_traits
        self.token_id = token_id
        self.payment_assets = payment_assets
        self.is_make_offer = is_make_offer
        self.owner = owner
        self.is_flagged = is_flagged
        self.orders = orders

    @property
    def contract_address(self):
        """Gets the contract_address of this Detail.  # noqa: E501

        contract address  # noqa: E501

        :return: The contract_address of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._contract_address

    @contract_address.setter
    def contract_address(self, contract_address):
        """Sets the contract_address of this Detail.

        contract address  # noqa: E501

        :param contract_address: The contract_address of this Detail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and contract_address is None:
            raise ValueError("Invalid value for `contract_address`, must not be `None`")  # noqa: E501

        self._contract_address = contract_address

    @property
    def collection(self):
        """Gets the collection of this Detail.  # noqa: E501

        collection info  # noqa: E501

        :return: The collection of this Detail.  # noqa: E501
        :rtype: Collection
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this Detail.

        collection info  # noqa: E501

        :param collection: The collection of this Detail.  # noqa: E501
        :type: Collection
        """
        if self._configuration.client_side_validation and collection is None:
            raise ValueError("Invalid value for `collection`, must not be `None`")  # noqa: E501

        self._collection = collection

    @property
    def name(self):
        """Gets the name of this Detail.  # noqa: E501

        nft name  # noqa: E501

        :return: The name of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Detail.

        nft name  # noqa: E501

        :param name: The name of this Detail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def image_url(self):
        """Gets the image_url of this Detail.  # noqa: E501

        nft image  # noqa: E501

        :return: The image_url of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url):
        """Sets the image_url of this Detail.

        nft image  # noqa: E501

        :param image_url: The image_url of this Detail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def schema_name(self):
        """Gets the schema_name of this Detail.  # noqa: E501

        nft type  # noqa: E501

        :return: The schema_name of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._schema_name

    @schema_name.setter
    def schema_name(self, schema_name):
        """Sets the schema_name of this Detail.

        nft type  # noqa: E501

        :param schema_name: The schema_name of this Detail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and schema_name is None:
            raise ValueError("Invalid value for `schema_name`, must not be `None`")  # noqa: E501

        self._schema_name = schema_name

    @property
    def symbol(self):
        """Gets the symbol of this Detail.  # noqa: E501

          # noqa: E501

        :return: The symbol of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol):
        """Sets the symbol of this Detail.

          # noqa: E501

        :param symbol: The symbol of this Detail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def description(self):
        """Gets the description of this Detail.  # noqa: E501

        description  # noqa: E501

        :return: The description of this Detail.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Detail.

        description  # noqa: E501

        :param description: The description of this Detail.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def token_traits(self):
        """Gets the token_traits of this Detail.  # noqa: E501

        nft traits  # noqa: E501

        :return: The token_traits of this Detail.  # noqa: E501
        :rtype: list[Traits]
        """
        return self._token_traits

    @token_traits.setter
    def token_traits(self, token_traits):
        """Sets the token_traits of this Detail.

        nft traits  # noqa: E501

        :param token_traits: The token_traits of this Detail.  # noqa: E501
        :type: list[Traits]
        """
        if self._configuration.client_side_validation and token_traits is None:
            raise ValueError("Invalid value for `token_traits`, must not be `None`")  # noqa: E501

        self._token_traits = token_traits

    @property
    def token_id(self):
        """Gets the token_id of this Detail.  # noqa: E501

        nft id  # noqa: E501

        :return: The token_id of this Detail.  # noqa: E501
        :rtype: float
        """
        return self._token_id

    @token_id.setter
    def token_id(self, token_id):
        """Sets the token_id of this Detail.

        nft id  # noqa: E501

        :param token_id: The token_id of this Detail.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and token_id is None:
            raise ValueError("Invalid value for `token_id`, must not be `None`")  # noqa: E501

        self._token_id = token_id

    @property
    def payment_assets(self):
        """Gets the payment_assets of this Detail.  # noqa: E501

        pay token info  # noqa: E501

        :return: The payment_assets of this Detail.  # noqa: E501
        :rtype: list[PaymentAssetItem]
        """
        return self._payment_assets

    @payment_assets.setter
    def payment_assets(self, payment_assets):
        """Sets the payment_assets of this Detail.

        pay token info  # noqa: E501

        :param payment_assets: The payment_assets of this Detail.  # noqa: E501
        :type: list[PaymentAssetItem]
        """
        if self._configuration.client_side_validation and payment_assets is None:
            raise ValueError("Invalid value for `payment_assets`, must not be `None`")  # noqa: E501

        self._payment_assets = payment_assets

    @property
    def is_make_offer(self):
        """Gets the is_make_offer of this Detail.  # noqa: E501

        is make offer  # noqa: E501

        :return: The is_make_offer of this Detail.  # noqa: E501
        :rtype: bool
        """
        return self._is_make_offer

    @is_make_offer.setter
    def is_make_offer(self, is_make_offer):
        """Sets the is_make_offer of this Detail.

        is make offer  # noqa: E501

        :param is_make_offer: The is_make_offer of this Detail.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_make_offer is None:
            raise ValueError("Invalid value for `is_make_offer`, must not be `None`")  # noqa: E501

        self._is_make_offer = is_make_offer

    @property
    def owner(self):
        """Gets the owner of this Detail.  # noqa: E501

        nft owner  # noqa: E501

        :return: The owner of this Detail.  # noqa: E501
        :rtype: Owner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this Detail.

        nft owner  # noqa: E501

        :param owner: The owner of this Detail.  # noqa: E501
        :type: Owner
        """
        if self._configuration.client_side_validation and owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def is_flagged(self):
        """Gets the is_flagged of this Detail.  # noqa: E501

        is flagged  # noqa: E501

        :return: The is_flagged of this Detail.  # noqa: E501
        :rtype: bool
        """
        return self._is_flagged

    @is_flagged.setter
    def is_flagged(self, is_flagged):
        """Sets the is_flagged of this Detail.

        is flagged  # noqa: E501

        :param is_flagged: The is_flagged of this Detail.  # noqa: E501
        :type: bool
        """
        if self._configuration.client_side_validation and is_flagged is None:
            raise ValueError("Invalid value for `is_flagged`, must not be `None`")  # noqa: E501

        self._is_flagged = is_flagged

    @property
    def orders(self):
        """Gets the orders of this Detail.  # noqa: E501

        order list  # noqa: E501

        :return: The orders of this Detail.  # noqa: E501
        :rtype: list[DetailOrder]
        """
        return self._orders

    @orders.setter
    def orders(self, orders):
        """Sets the orders of this Detail.

        order list  # noqa: E501

        :param orders: The orders of this Detail.  # noqa: E501
        :type: list[DetailOrder]
        """
        if self._configuration.client_side_validation and orders is None:
            raise ValueError("Invalid value for `orders`, must not be `None`")  # noqa: E501

        self._orders = orders

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Detail, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Detail):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Detail):
            return True

        return self.to_dict() != other.to_dict()
