# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openocean_api.configuration import Configuration


class QuoteByOORequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'from_symbol': 'str',
        'to_symbol': 'str',
        'from_chain_id': 'float',
        'to_chain_id': 'float',
        'amount': 'str'
    }

    attribute_map = {
        'from_symbol': 'fromSymbol',
        'to_symbol': 'toSymbol',
        'from_chain_id': 'fromChainId',
        'to_chain_id': 'toChainId',
        'amount': 'amount'
    }

    def __init__(self, from_symbol=None, to_symbol=None, from_chain_id=None, to_chain_id=None, amount=None, _configuration=None):  # noqa: E501
        """QuoteByOORequest - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._from_symbol = None
        self._to_symbol = None
        self._from_chain_id = None
        self._to_chain_id = None
        self._amount = None
        self.discriminator = None

        self.from_symbol = from_symbol
        self.to_symbol = to_symbol
        self.from_chain_id = from_chain_id
        self.to_chain_id = to_chain_id
        self.amount = amount

    @property
    def from_symbol(self):
        """Gets the from_symbol of this QuoteByOORequest.  # noqa: E501

        token symbol  # noqa: E501

        :return: The from_symbol of this QuoteByOORequest.  # noqa: E501
        :rtype: str
        """
        return self._from_symbol

    @from_symbol.setter
    def from_symbol(self, from_symbol):
        """Sets the from_symbol of this QuoteByOORequest.

        token symbol  # noqa: E501

        :param from_symbol: The from_symbol of this QuoteByOORequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and from_symbol is None:
            raise ValueError("Invalid value for `from_symbol`, must not be `None`")  # noqa: E501

        self._from_symbol = from_symbol

    @property
    def to_symbol(self):
        """Gets the to_symbol of this QuoteByOORequest.  # noqa: E501

        token symbol  # noqa: E501

        :return: The to_symbol of this QuoteByOORequest.  # noqa: E501
        :rtype: str
        """
        return self._to_symbol

    @to_symbol.setter
    def to_symbol(self, to_symbol):
        """Sets the to_symbol of this QuoteByOORequest.

        token symbol  # noqa: E501

        :param to_symbol: The to_symbol of this QuoteByOORequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and to_symbol is None:
            raise ValueError("Invalid value for `to_symbol`, must not be `None`")  # noqa: E501

        self._to_symbol = to_symbol

    @property
    def from_chain_id(self):
        """Gets the from_chain_id of this QuoteByOORequest.  # noqa: E501

        chain id  # noqa: E501

        :return: The from_chain_id of this QuoteByOORequest.  # noqa: E501
        :rtype: float
        """
        return self._from_chain_id

    @from_chain_id.setter
    def from_chain_id(self, from_chain_id):
        """Sets the from_chain_id of this QuoteByOORequest.

        chain id  # noqa: E501

        :param from_chain_id: The from_chain_id of this QuoteByOORequest.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and from_chain_id is None:
            raise ValueError("Invalid value for `from_chain_id`, must not be `None`")  # noqa: E501

        self._from_chain_id = from_chain_id

    @property
    def to_chain_id(self):
        """Gets the to_chain_id of this QuoteByOORequest.  # noqa: E501

        chain id  # noqa: E501

        :return: The to_chain_id of this QuoteByOORequest.  # noqa: E501
        :rtype: float
        """
        return self._to_chain_id

    @to_chain_id.setter
    def to_chain_id(self, to_chain_id):
        """Sets the to_chain_id of this QuoteByOORequest.

        chain id  # noqa: E501

        :param to_chain_id: The to_chain_id of this QuoteByOORequest.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and to_chain_id is None:
            raise ValueError("Invalid value for `to_chain_id`, must not be `None`")  # noqa: E501

        self._to_chain_id = to_chain_id

    @property
    def amount(self):
        """Gets the amount of this QuoteByOORequest.  # noqa: E501

        token amount  # noqa: E501

        :return: The amount of this QuoteByOORequest.  # noqa: E501
        :rtype: str
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this QuoteByOORequest.

        token amount  # noqa: E501

        :param amount: The amount of this QuoteByOORequest.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QuoteByOORequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QuoteByOORequest):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QuoteByOORequest):
            return True

        return self.to_dict() != other.to_dict()
