# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from openocean_api.configuration import Configuration


class ActivityByAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'collection': 'ActivityCollection',
        'token': 'ActivityToken',
        'type': 'str',
        'amount': 'float',
        'from_address': 'str',
        'to_address': 'str',
        'price': 'float',
        'timestamp': 'float'
    }

    attribute_map = {
        'collection': 'collection',
        'token': 'token',
        'type': 'type',
        'amount': 'amount',
        'from_address': 'fromAddress',
        'to_address': 'toAddress',
        'price': 'price',
        'timestamp': 'timestamp'
    }

    def __init__(self, collection=None, token=None, type=None, amount=None, from_address=None, to_address=None, price=None, timestamp=None, _configuration=None):  # noqa: E501
        """ActivityByAddress - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._collection = None
        self._token = None
        self._type = None
        self._amount = None
        self._from_address = None
        self._to_address = None
        self._price = None
        self._timestamp = None
        self.discriminator = None

        self.collection = collection
        self.token = token
        self.type = type
        self.amount = amount
        self.from_address = from_address
        if to_address is not None:
            self.to_address = to_address
        self.price = price
        self.timestamp = timestamp

    @property
    def collection(self):
        """Gets the collection of this ActivityByAddress.  # noqa: E501

        collection info  # noqa: E501

        :return: The collection of this ActivityByAddress.  # noqa: E501
        :rtype: ActivityCollection
        """
        return self._collection

    @collection.setter
    def collection(self, collection):
        """Sets the collection of this ActivityByAddress.

        collection info  # noqa: E501

        :param collection: The collection of this ActivityByAddress.  # noqa: E501
        :type: ActivityCollection
        """
        if self._configuration.client_side_validation and collection is None:
            raise ValueError("Invalid value for `collection`, must not be `None`")  # noqa: E501

        self._collection = collection

    @property
    def token(self):
        """Gets the token of this ActivityByAddress.  # noqa: E501

        token info  # noqa: E501

        :return: The token of this ActivityByAddress.  # noqa: E501
        :rtype: ActivityToken
        """
        return self._token

    @token.setter
    def token(self, token):
        """Sets the token of this ActivityByAddress.

        token info  # noqa: E501

        :param token: The token of this ActivityByAddress.  # noqa: E501
        :type: ActivityToken
        """
        if self._configuration.client_side_validation and token is None:
            raise ValueError("Invalid value for `token`, must not be `None`")  # noqa: E501

        self._token = token

    @property
    def type(self):
        """Gets the type of this ActivityByAddress.  # noqa: E501

        activity type  # noqa: E501

        :return: The type of this ActivityByAddress.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ActivityByAddress.

        activity type  # noqa: E501

        :param type: The type of this ActivityByAddress.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def amount(self):
        """Gets the amount of this ActivityByAddress.  # noqa: E501

        nft count  # noqa: E501

        :return: The amount of this ActivityByAddress.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this ActivityByAddress.

        nft count  # noqa: E501

        :param amount: The amount of this ActivityByAddress.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def from_address(self):
        """Gets the from_address of this ActivityByAddress.  # noqa: E501

        from address  # noqa: E501

        :return: The from_address of this ActivityByAddress.  # noqa: E501
        :rtype: str
        """
        return self._from_address

    @from_address.setter
    def from_address(self, from_address):
        """Sets the from_address of this ActivityByAddress.

        from address  # noqa: E501

        :param from_address: The from_address of this ActivityByAddress.  # noqa: E501
        :type: str
        """
        if self._configuration.client_side_validation and from_address is None:
            raise ValueError("Invalid value for `from_address`, must not be `None`")  # noqa: E501

        self._from_address = from_address

    @property
    def to_address(self):
        """Gets the to_address of this ActivityByAddress.  # noqa: E501

        to address  # noqa: E501

        :return: The to_address of this ActivityByAddress.  # noqa: E501
        :rtype: str
        """
        return self._to_address

    @to_address.setter
    def to_address(self, to_address):
        """Sets the to_address of this ActivityByAddress.

        to address  # noqa: E501

        :param to_address: The to_address of this ActivityByAddress.  # noqa: E501
        :type: str
        """

        self._to_address = to_address

    @property
    def price(self):
        """Gets the price of this ActivityByAddress.  # noqa: E501

        unit price  # noqa: E501

        :return: The price of this ActivityByAddress.  # noqa: E501
        :rtype: float
        """
        return self._price

    @price.setter
    def price(self, price):
        """Sets the price of this ActivityByAddress.

        unit price  # noqa: E501

        :param price: The price of this ActivityByAddress.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")  # noqa: E501

        self._price = price

    @property
    def timestamp(self):
        """Gets the timestamp of this ActivityByAddress.  # noqa: E501

        time  # noqa: E501

        :return: The timestamp of this ActivityByAddress.  # noqa: E501
        :rtype: float
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ActivityByAddress.

        time  # noqa: E501

        :param timestamp: The timestamp of this ActivityByAddress.  # noqa: E501
        :type: float
        """
        if self._configuration.client_side_validation and timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ActivityByAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ActivityByAddress):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ActivityByAddress):
            return True

        return self.to_dict() != other.to_dict()
