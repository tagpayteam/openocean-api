# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openocean_api.api_client import ApiClient


class LimitOrderApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def controller_limit_order_create(self, chain_id, address, **kwargs):  # noqa: E501
        """list by address   # noqa: E501

        get limit order by address   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_limit_order_create(chain_id, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: eg: 1 chain id  (required)
        :param str address: eg:0x000... user's wallet address  (required)
        :param str statuses: eg:[1,3,4] order status code 1-unfill, 3-cancel, 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_limit_order_create_with_http_info(chain_id, address, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_limit_order_create_with_http_info(chain_id, address, **kwargs)  # noqa: E501
            return data

    def controller_limit_order_create_with_http_info(self, chain_id, address, **kwargs):  # noqa: E501
        """list by address   # noqa: E501

        get limit order by address   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_limit_order_create_with_http_info(chain_id, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: eg: 1 chain id  (required)
        :param str address: eg:0x000... user's wallet address  (required)
        :param str statuses: eg:[1,3,4] order status code 1-unfill, 3-cancel, 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain_id', 'address', 'statuses']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_limit_order_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain_id' is set
        if self.api_client.client_side_validation and ('chain_id' not in params or
                                                       params['chain_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain_id` when calling `controller_limit_order_create`")  # noqa: E501
        # verify the required parameter 'address' is set
        if self.api_client.client_side_validation and ('address' not in params or
                                                       params['address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `address` when calling `controller_limit_order_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain_id' in params:
            path_params['chainId'] = params['chain_id']  # noqa: E501
        if 'address' in params:
            path_params['address'] = params['address']  # noqa: E501

        query_params = []
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/v1/{chainId}/limit-order/address/{address}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_limit_order_update(self, chain_id, **kwargs):  # noqa: E501
        """list all   # noqa: E501

        get all limit order   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_limit_order_update(chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: eg: 1 chain id  (required)
        :param str statuses: eg:[1,3,4] order status code 1-unfill, 3-cancel, 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_limit_order_update_with_http_info(chain_id, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_limit_order_update_with_http_info(chain_id, **kwargs)  # noqa: E501
            return data

    def controller_limit_order_update_with_http_info(self, chain_id, **kwargs):  # noqa: E501
        """list all   # noqa: E501

        get all limit order   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_limit_order_update_with_http_info(chain_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain_id: eg: 1 chain id  (required)
        :param str statuses: eg:[1,3,4] order status code 1-unfill, 3-cancel, 
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain_id', 'statuses']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_limit_order_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain_id' is set
        if self.api_client.client_side_validation and ('chain_id' not in params or
                                                       params['chain_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain_id` when calling `controller_limit_order_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain_id' in params:
            path_params['chainId'] = params['chain_id']  # noqa: E501

        query_params = []
        if 'statuses' in params:
            query_params.append(('statuses', params['statuses']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/v1/{chainId}/limit-order/all', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
