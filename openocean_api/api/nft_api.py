# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openocean_api.api_client import ApiClient


class NftApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def controller_nft_assets(self, chain, body, **kwargs):  # noqa: E501
        """Create Listing   # noqa: E501

        get sell signature data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_assets(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param SellRequest body:  (required)
        :return: SellResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_assets_with_http_info(chain, body, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_assets_with_http_info(chain, body, **kwargs)  # noqa: E501
            return data

    def controller_nft_assets_with_http_info(self, chain, body, **kwargs):  # noqa: E501
        """Create Listing   # noqa: E501

        get sell signature data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_assets_with_http_info(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param SellRequest body:  (required)
        :return: SellResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_assets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_assets`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `controller_nft_assets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/sell', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SellResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_buy(self, chain, body, **kwargs):  # noqa: E501
        """Submit Order   # noqa: E501

        post signature data to market   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_buy(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param SignRequest body:  (required)
        :return: SignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_buy_with_http_info(chain, body, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_buy_with_http_info(chain, body, **kwargs)  # noqa: E501
            return data

    def controller_nft_buy_with_http_info(self, chain, body, **kwargs):  # noqa: E501
        """Submit Order   # noqa: E501

        post signature data to market   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_buy_with_http_info(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param SignRequest body:  (required)
        :return: SignResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_buy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_buy`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `controller_nft_buy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/sign', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SignResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_check_order(self, chain, body, **kwargs):  # noqa: E501
        """Create Offer   # noqa: E501

        get offer signature data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_check_order(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param OfferRequest body:  (required)
        :return: SellResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_check_order_with_http_info(chain, body, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_check_order_with_http_info(chain, body, **kwargs)  # noqa: E501
            return data

    def controller_nft_check_order_with_http_info(self, chain, body, **kwargs):  # noqa: E501
        """Create Offer   # noqa: E501

        get offer signature data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_check_order_with_http_info(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param OfferRequest body:  (required)
        :return: SellResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_check_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_check_order`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `controller_nft_check_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/offer', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SellResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_collections(self, chain, body, **kwargs):  # noqa: E501
        """Buy   # noqa: E501

        get buy transaction   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_collections(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param BuyRequest body:  (required)
        :return: BuyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_collections_with_http_info(chain, body, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_collections_with_http_info(chain, body, **kwargs)  # noqa: E501
            return data

    def controller_nft_collections_with_http_info(self, chain, body, **kwargs):  # noqa: E501
        """Buy   # noqa: E501

        get buy transaction   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_collections_with_http_info(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param BuyRequest body:  (required)
        :return: BuyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_collections" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_collections`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `controller_nft_collections`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/buy', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BuyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_detail(self, chain, address, token_id, **kwargs):  # noqa: E501
        """NFT Detail   # noqa: E501

        get nft info and listings by nft   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_detail(chain, address, token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str address: 0x16f71d593bc6446a16ef84551cf8d76ff5973db1 collection address  (required)
        :param str token_id: eg:2 nft id  (required)
        :param str code: eg:MTAwMDAwMDAwMDAwMDAwMF8yNTQx response code 
        :param float amount: eg:1 only sudoswap needs 
        :return: DetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_detail_with_http_info(chain, address, token_id, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_detail_with_http_info(chain, address, token_id, **kwargs)  # noqa: E501
            return data

    def controller_nft_detail_with_http_info(self, chain, address, token_id, **kwargs):  # noqa: E501
        """NFT Detail   # noqa: E501

        get nft info and listings by nft   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_detail_with_http_info(chain, address, token_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str address: 0x16f71d593bc6446a16ef84551cf8d76ff5973db1 collection address  (required)
        :param str token_id: eg:2 nft id  (required)
        :param str code: eg:MTAwMDAwMDAwMDAwMDAwMF8yNTQx response code 
        :param float amount: eg:1 only sudoswap needs 
        :return: DetailResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'address', 'token_id', 'code', 'amount']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_detail`")  # noqa: E501
        # verify the required parameter 'address' is set
        if self.api_client.client_side_validation and ('address' not in params or
                                                       params['address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `address` when calling `controller_nft_detail`")  # noqa: E501
        # verify the required parameter 'token_id' is set
        if self.api_client.client_side_validation and ('token_id' not in params or
                                                       params['token_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `token_id` when calling `controller_nft_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'token_id' in params:
            query_params.append(('tokenId', params['token_id']))  # noqa: E501
        if 'code' in params:
            query_params.append(('code', params['code']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/detail', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DetailResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_get_delta_and_curve_type(self, chain, filters, **kwargs):  # noqa: E501
        """Collections   # noqa: E501

        get collections by filters   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_get_delta_and_curve_type(chain, filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str filters: collectionFilter filter condition  (required)
        :param str offset: eg:MTAwMDAwMDAwMDAwMDAwMF8yNTQx pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :param str sort: eg:allTimeVolume sort field 
        :return: CollectionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_get_delta_and_curve_type_with_http_info(chain, filters, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_get_delta_and_curve_type_with_http_info(chain, filters, **kwargs)  # noqa: E501
            return data

    def controller_nft_get_delta_and_curve_type_with_http_info(self, chain, filters, **kwargs):  # noqa: E501
        """Collections   # noqa: E501

        get collections by filters   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_get_delta_and_curve_type_with_http_info(chain, filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str filters: collectionFilter filter condition  (required)
        :param str offset: eg:MTAwMDAwMDAwMDAwMDAwMF8yNTQx pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :param str sort: eg:allTimeVolume sort field 
        :return: CollectionsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'filters', 'offset', 'limit', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_get_delta_and_curve_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_get_delta_and_curve_type`")  # noqa: E501
        # verify the required parameter 'filters' is set
        if self.api_client.client_side_validation and ('filters' not in params or
                                                       params['filters'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filters` when calling `controller_nft_get_delta_and_curve_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []
        if 'filters' in params:
            query_params.append(('filters', params['filters']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v2/{chain}/collections', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CollectionsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_get_orders(self, chain, address, **kwargs):  # noqa: E501
        """Listings   # noqa: E501

        get all listings   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_get_orders(chain, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str address: wallet address  (required)
        :param str offset: eg:1 pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :return: ListingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_get_orders_with_http_info(chain, address, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_get_orders_with_http_info(chain, address, **kwargs)  # noqa: E501
            return data

    def controller_nft_get_orders_with_http_info(self, chain, address, **kwargs):  # noqa: E501
        """Listings   # noqa: E501

        get all listings   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_get_orders_with_http_info(chain, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str address: wallet address  (required)
        :param str offset: eg:1 pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :return: ListingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'address', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_get_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_get_orders`")  # noqa: E501
        # verify the required parameter 'address' is set
        if self.api_client.client_side_validation and ('address' not in params or
                                                       params['address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `address` when calling `controller_nft_get_orders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/listings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListingsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_import_asset(self, chain, body, **kwargs):  # noqa: E501
        """Order Status   # noqa: E501

        check order status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_import_asset(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param CheckOrderRequest body:  (required)
        :return: CheckOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_import_asset_with_http_info(chain, body, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_import_asset_with_http_info(chain, body, **kwargs)  # noqa: E501
            return data

    def controller_nft_import_asset_with_http_info(self, chain, body, **kwargs):  # noqa: E501
        """Order Status   # noqa: E501

        check order status   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_import_asset_with_http_info(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param CheckOrderRequest body:  (required)
        :return: CheckOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_import_asset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_import_asset`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `controller_nft_import_asset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/order/state', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CheckOrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_offer(self, chain, body, **kwargs):  # noqa: E501
        """Swap Token   # noqa: E501

        get swap outAmount data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_offer(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param SwapRequest body:  (required)
        :return: SwapResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_offer_with_http_info(chain, body, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_offer_with_http_info(chain, body, **kwargs)  # noqa: E501
            return data

    def controller_nft_offer_with_http_info(self, chain, body, **kwargs):  # noqa: E501
        """Swap Token   # noqa: E501

        get swap outAmount data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_offer_with_http_info(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param SwapRequest body:  (required)
        :return: SwapResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_offer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_offer`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `controller_nft_offer`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/swap', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='SwapResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_orders(self, chain, filters, **kwargs):  # noqa: E501
        """NFT Orders   # noqa: E501

        get collection all nfts listing by collection address   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_orders(chain, filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str filters: orderFilter filter condition  (required)
        :param str offset: eg:MTAwMDAwMDAwMDAwMDAwMF8yNTQx pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :param str sort: eg:floorAskPrice sort field 
        :param str amount: eg:{\"0x16f71d593bc6446a16ef84551cf8d76ff5973db1\":3} sudoswap needs this field, the initialization interface is {}, and the later refresh needs to pass the value,key-poolId (the id of the pool, returned by the orders interface), amount-the number of selected nft (default is 0) 
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_orders_with_http_info(chain, filters, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_orders_with_http_info(chain, filters, **kwargs)  # noqa: E501
            return data

    def controller_nft_orders_with_http_info(self, chain, filters, **kwargs):  # noqa: E501
        """NFT Orders   # noqa: E501

        get collection all nfts listing by collection address   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_orders_with_http_info(chain, filters, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str filters: orderFilter filter condition  (required)
        :param str offset: eg:MTAwMDAwMDAwMDAwMDAwMF8yNTQx pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :param str sort: eg:floorAskPrice sort field 
        :param str amount: eg:{\"0x16f71d593bc6446a16ef84551cf8d76ff5973db1\":3} sudoswap needs this field, the initialization interface is {}, and the later refresh needs to pass the value,key-poolId (the id of the pool, returned by the orders interface), amount-the number of selected nft (default is 0) 
        :return: OrdersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'filters', 'offset', 'limit', 'sort', 'amount']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_orders`")  # noqa: E501
        # verify the required parameter 'filters' is set
        if self.api_client.client_side_validation and ('filters' not in params or
                                                       params['filters'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `filters` when calling `controller_nft_orders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []
        if 'filters' in params:
            query_params.append(('filters', params['filters']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v2/{chain}/orders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrdersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_quote(self, chain, address, **kwargs):  # noqa: E501
        """User Activity   # noqa: E501

        get all activity by wallet address   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_quote(chain, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str address: wallet address  (required)
        :param str offset: eg:MTAwMDAwMDAwMDAwMDAwMF8yNTQx pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :return: ActivityByAddressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_quote_with_http_info(chain, address, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_quote_with_http_info(chain, address, **kwargs)  # noqa: E501
            return data

    def controller_nft_quote_with_http_info(self, chain, address, **kwargs):  # noqa: E501
        """User Activity   # noqa: E501

        get all activity by wallet address   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_quote_with_http_info(chain, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str address: wallet address  (required)
        :param str offset: eg:MTAwMDAwMDAwMDAwMDAwMF8yNTQx pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :return: ActivityByAddressResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'address', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_quote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_quote`")  # noqa: E501
        # verify the required parameter 'address' is set
        if self.api_client.client_side_validation and ('address' not in params or
                                                       params['address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `address` when calling `controller_nft_quote`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/address/activity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActivityByAddressResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_rankings(self, chain, **kwargs):  # noqa: E501
        """Rankings   # noqa: E501

        get collection ranking by chain   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_rankings(chain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str time: eg:1d,7d,30d,all time period 
        :param str offset: eg:0 pagination index 
        :param str limit: eg:20 pagination limit(max 20) 
        :return: RankingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_rankings_with_http_info(chain, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_rankings_with_http_info(chain, **kwargs)  # noqa: E501
            return data

    def controller_nft_rankings_with_http_info(self, chain, **kwargs):  # noqa: E501
        """Rankings   # noqa: E501

        get collection ranking by chain   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_rankings_with_http_info(chain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str time: eg:1d,7d,30d,all time period 
        :param str offset: eg:0 pagination index 
        :param str limit: eg:20 pagination limit(max 20) 
        :return: RankingsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'time', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_rankings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_rankings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []
        if 'time' in params:
            query_params.append(('time', params['time']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v2/{chain}/rankings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='RankingsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_report(self, chain, address, **kwargs):  # noqa: E501
        """NFTs   # noqa: E501

        get all nfts   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_report(chain, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str address: wallet address  (required)
        :param str offset: eg:1 pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :return: NftsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_report_with_http_info(chain, address, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_report_with_http_info(chain, address, **kwargs)  # noqa: E501
            return data

    def controller_nft_report_with_http_info(self, chain, address, **kwargs):  # noqa: E501
        """NFTs   # noqa: E501

        get all nfts   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_report_with_http_info(chain, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str address: wallet address  (required)
        :param str offset: eg:1 pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :return: NftsResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'address', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_report" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_report`")  # noqa: E501
        # verify the required parameter 'address' is set
        if self.api_client.client_side_validation and ('address' not in params or
                                                       params['address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `address` when calling `controller_nft_report`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/nfts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='NftsResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_sell(self, chain, body, **kwargs):  # noqa: E501
        """Quote Token   # noqa: E501

        get Quote outAmount data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_sell(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param list[ERRORUNKNOWN] body: swapItem  (required)
        :return: QuoteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_sell_with_http_info(chain, body, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_sell_with_http_info(chain, body, **kwargs)  # noqa: E501
            return data

    def controller_nft_sell_with_http_info(self, chain, body, **kwargs):  # noqa: E501
        """Quote Token   # noqa: E501

        get Quote outAmount data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_sell_with_http_info(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param list[ERRORUNKNOWN] body: swapItem  (required)
        :return: QuoteResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_sell" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_sell`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `controller_nft_sell`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/quote', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QuoteResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_sign(self, chain, body, **kwargs):  # noqa: E501
        """Cancel   # noqa: E501

        cancel listing and offer   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_sign(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param CancelRequest body:  (required)
        :return: CancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_sign_with_http_info(chain, body, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_sign_with_http_info(chain, body, **kwargs)  # noqa: E501
            return data

    def controller_nft_sign_with_http_info(self, chain, body, **kwargs):  # noqa: E501
        """Cancel   # noqa: E501

        cancel listing and offer   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_sign_with_http_info(chain, body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param CancelRequest body:  (required)
        :return: CancelResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_sign" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_sign`")  # noqa: E501
        # verify the required parameter 'body' is set
        if self.api_client.client_side_validation and ('body' not in params or
                                                       params['body'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `body` when calling `controller_nft_sign`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/cancel', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CancelResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_swap(self, chain, collection, **kwargs):  # noqa: E501
        """Collection Activity   # noqa: E501

        get all activity by collection or nft   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_swap(chain, collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str collection: ranking response id(address or slug)  (required)
        :param str collection_slug: collection slug 
        :param str token_id: nft id 
        :param str offset: eg:MTAwMDAwMDAwMDAwMDAwMF8yNTQx pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :return: ActivityByCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_swap_with_http_info(chain, collection, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_swap_with_http_info(chain, collection, **kwargs)  # noqa: E501
            return data

    def controller_nft_swap_with_http_info(self, chain, collection, **kwargs):  # noqa: E501
        """Collection Activity   # noqa: E501

        get all activity by collection or nft   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_swap_with_http_info(chain, collection, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str collection: ranking response id(address or slug)  (required)
        :param str collection_slug: collection slug 
        :param str token_id: nft id 
        :param str offset: eg:MTAwMDAwMDAwMDAwMDAwMF8yNTQx pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :return: ActivityByCollectionResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'collection', 'collection_slug', 'token_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_swap" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_swap`")  # noqa: E501
        # verify the required parameter 'collection' is set
        if self.api_client.client_side_validation and ('collection' not in params or
                                                       params['collection'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `collection` when calling `controller_nft_swap`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []
        if 'collection' in params:
            query_params.append(('collection', params['collection']))  # noqa: E501
        if 'collection_slug' in params:
            query_params.append(('collectionSlug', params['collection_slug']))  # noqa: E501
        if 'token_id' in params:
            query_params.append(('tokenId', params['token_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/collection/activity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ActivityByCollectionResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_nft_testscan(self, chain, address, **kwargs):  # noqa: E501
        """Offers   # noqa: E501

        get all offers   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_testscan(chain, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str address: wallet address  (required)
        :param str offset: eg:1 pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :return: OffersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_nft_testscan_with_http_info(chain, address, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_nft_testscan_with_http_info(chain, address, **kwargs)  # noqa: E501
            return data

    def controller_nft_testscan_with_http_info(self, chain, address, **kwargs):  # noqa: E501
        """Offers   # noqa: E501

        get all offers   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_nft_testscan_with_http_info(chain, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:eth,avax,polygon,arbitrum,optimism,solana chain code  (required)
        :param str address: wallet address  (required)
        :param str offset: eg:1 pagination index(response next) 
        :param str limit: eg:20 pagination limit 
        :return: OffersResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'address', 'offset', 'limit']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_nft_testscan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_nft_testscan`")  # noqa: E501
        # verify the required parameter 'address' is set
        if self.api_client.client_side_validation and ('address' not in params or
                                                       params['address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `address` when calling `controller_nft_testscan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/nft/v1/{chain}/offers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OffersResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
