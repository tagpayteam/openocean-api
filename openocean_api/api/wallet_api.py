# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openocean_api.api_client import ApiClient


class WalletApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def controller_wallet_create_wallet(self, chain, **kwargs):  # noqa: E501
        """create wallet   # noqa: E501

        create user's wallet   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_wallet_create_wallet(chain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg: bsc chain code  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_wallet_create_wallet_with_http_info(chain, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_wallet_create_wallet_with_http_info(chain, **kwargs)  # noqa: E501
            return data

    def controller_wallet_create_wallet_with_http_info(self, chain, **kwargs):  # noqa: E501
        """create wallet   # noqa: E501

        create user's wallet   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_wallet_create_wallet_with_http_info(chain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg: bsc chain code  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_wallet_create_wallet" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_wallet_create_wallet`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/v3/{chain}/createWallet', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_wallet_get_balance(self, chain, account, in_token_address, **kwargs):  # noqa: E501
        """get balance   # noqa: E501

        get balance by account   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_wallet_get_balance(chain, account, in_token_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg: bsc chain code  (required)
        :param str account: eg: 0x000... user's wallet address  (required)
        :param str in_token_address: eg: token address  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_wallet_get_balance_with_http_info(chain, account, in_token_address, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_wallet_get_balance_with_http_info(chain, account, in_token_address, **kwargs)  # noqa: E501
            return data

    def controller_wallet_get_balance_with_http_info(self, chain, account, in_token_address, **kwargs):  # noqa: E501
        """get balance   # noqa: E501

        get balance by account   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_wallet_get_balance_with_http_info(chain, account, in_token_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg: bsc chain code  (required)
        :param str account: eg: 0x000... user's wallet address  (required)
        :param str in_token_address: eg: token address  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'account', 'in_token_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_wallet_get_balance" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_wallet_get_balance`")  # noqa: E501
        # verify the required parameter 'account' is set
        if self.api_client.client_side_validation and ('account' not in params or
                                                       params['account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account` when calling `controller_wallet_get_balance`")  # noqa: E501
        # verify the required parameter 'in_token_address' is set
        if self.api_client.client_side_validation and ('in_token_address' not in params or
                                                       params['in_token_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `in_token_address` when calling `controller_wallet_get_balance`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []
        if 'account' in params:
            query_params.append(('account', params['account']))  # noqa: E501
        if 'in_token_address' in params:
            query_params.append(('inTokenAddress', params['in_token_address']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/v3/{chain}/getBalance', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
