# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openocean_api.api_client import ApiClient


class SwapApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def controller_swap_dex_list(self, chain, **kwargs):  # noqa: E501
        """dexList   # noqa: E501

        get Dexes List   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_swap_dex_list(chain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: get Dexes List  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_swap_dex_list_with_http_info(chain, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_swap_dex_list_with_http_info(chain, **kwargs)  # noqa: E501
            return data

    def controller_swap_dex_list_with_http_info(self, chain, **kwargs):  # noqa: E501
        """dexList   # noqa: E501

        get Dexes List   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_swap_dex_list_with_http_info(chain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: get Dexes List  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_swap_dex_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_swap_dex_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/v3/{chain}/dexList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_swap_get_transaction(self, chain, hash, **kwargs):  # noqa: E501
        """getTransaction   # noqa: E501

        get user's transaction by hash   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_swap_get_transaction(chain, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:bsc support chains: https://docs.openocean.finance/dev/supported-chains  (required)
        :param str hash: eg: 0x4e32ab6e0e9ff2db6157a14b0d4bac018f1633e14b3cccbd56541f24f191a5b4 hash  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_swap_get_transaction_with_http_info(chain, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_swap_get_transaction_with_http_info(chain, hash, **kwargs)  # noqa: E501
            return data

    def controller_swap_get_transaction_with_http_info(self, chain, hash, **kwargs):  # noqa: E501
        """getTransaction   # noqa: E501

        get user's transaction by hash   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_swap_get_transaction_with_http_info(chain, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:bsc support chains: https://docs.openocean.finance/dev/supported-chains  (required)
        :param str hash: eg: 0x4e32ab6e0e9ff2db6157a14b0d4bac018f1633e14b3cccbd56541f24f191a5b4 hash  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_swap_get_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_swap_get_transaction`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if self.api_client.client_side_validation and ('hash' not in params or
                                                       params['hash'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `hash` when calling `controller_swap_get_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []
        if 'hash' in params:
            query_params.append(('hash', params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/v3/{chain}/getTransaction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_swap_quote(self, chain, in_token_address, out_token_address, amount, slippage, gas_price, **kwargs):  # noqa: E501
        """quote   # noqa: E501

        query demo   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_swap_quote(chain, in_token_address, out_token_address, amount, slippage, gas_price, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:bsc support chains: https://docs.openocean.finance/dev/supported-chains  (required)
        :param str in_token_address: eg:0x55d398326f99059ff775485246999027b3197955 you want to sell token address  (required)
        :param str out_token_address: eg:0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d you want to buy token address  (required)
        :param str amount: eg: 1 token amount without decimals  (required)
        :param str slippage: eg: 1 1% means 1, max 50  (required)
        :param str gas_price: eg: 5 without decimals  (required)
        :param str enabled_dex_ids: ID of dexes that can be accessed through dexList endpoint
        :param str disabled_dex_ids: ID of dexes that can be accessed through dexList endpoint
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_swap_quote_with_http_info(chain, in_token_address, out_token_address, amount, slippage, gas_price, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_swap_quote_with_http_info(chain, in_token_address, out_token_address, amount, slippage, gas_price, **kwargs)  # noqa: E501
            return data

    def controller_swap_quote_with_http_info(self, chain, in_token_address, out_token_address, amount, slippage, gas_price, **kwargs):  # noqa: E501
        """quote   # noqa: E501

        query demo   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_swap_quote_with_http_info(chain, in_token_address, out_token_address, amount, slippage, gas_price, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:bsc support chains: https://docs.openocean.finance/dev/supported-chains  (required)
        :param str in_token_address: eg:0x55d398326f99059ff775485246999027b3197955 you want to sell token address  (required)
        :param str out_token_address: eg:0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d you want to buy token address  (required)
        :param str amount: eg: 1 token amount without decimals  (required)
        :param str slippage: eg: 1 1% means 1, max 50  (required)
        :param str gas_price: eg: 5 without decimals  (required)
        :param str enabled_dex_ids: ID of dexes that can be accessed through dexList endpoint
        :param str disabled_dex_ids: ID of dexes that can be accessed through dexList endpoint
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'in_token_address', 'out_token_address', 'amount', 'slippage', 'gas_price', 'enabled_dex_ids', 'disabled_dex_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_swap_quote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_swap_quote`")  # noqa: E501
        # verify the required parameter 'in_token_address' is set
        if self.api_client.client_side_validation and ('in_token_address' not in params or
                                                       params['in_token_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `in_token_address` when calling `controller_swap_quote`")  # noqa: E501
        # verify the required parameter 'out_token_address' is set
        if self.api_client.client_side_validation and ('out_token_address' not in params or
                                                       params['out_token_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `out_token_address` when calling `controller_swap_quote`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if self.api_client.client_side_validation and ('amount' not in params or
                                                       params['amount'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `amount` when calling `controller_swap_quote`")  # noqa: E501
        # verify the required parameter 'slippage' is set
        if self.api_client.client_side_validation and ('slippage' not in params or
                                                       params['slippage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `slippage` when calling `controller_swap_quote`")  # noqa: E501
        # verify the required parameter 'gas_price' is set
        if self.api_client.client_side_validation and ('gas_price' not in params or
                                                       params['gas_price'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `gas_price` when calling `controller_swap_quote`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []
        if 'in_token_address' in params:
            query_params.append(('inTokenAddress', params['in_token_address']))  # noqa: E501
        if 'out_token_address' in params:
            query_params.append(('outTokenAddress', params['out_token_address']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'slippage' in params:
            query_params.append(('slippage', params['slippage']))  # noqa: E501
        if 'gas_price' in params:
            query_params.append(('gasPrice', params['gas_price']))  # noqa: E501
        if 'enabled_dex_ids' in params:
            query_params.append(('enabledDexIds', params['enabled_dex_ids']))  # noqa: E501
        if 'disabled_dex_ids' in params:
            query_params.append(('disabledDexIds', params['disabled_dex_ids']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/v3/{chain}/quote', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_swap_swap_quote(self, chain, in_token_address, out_token_address, amount, slippage, gas_price, account, **kwargs):  # noqa: E501
        """swap_quote   # noqa: E501

        get swap data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_swap_swap_quote(chain, in_token_address, out_token_address, amount, slippage, gas_price, account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:bsc support chains: https://docs.openocean.finance/dev/supported-chains  (required)
        :param str in_token_address: eg:0x55d398326f99059ff775485246999027b3197955 you want to sell token address  (required)
        :param str out_token_address: eg:0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d you want to buy token address  (required)
        :param str amount: eg: 1 token amount without decimals  (required)
        :param str slippage: eg: 1 1% means 1, max 50  (required)
        :param str gas_price: eg: 5 without decimals  (required)
        :param str account: eg: 0x000... user's wallet address  (required)
        :param str sender: The caller address.  Token Delivery Logic If a sender address is specified,   the sender address will be set as sender(caller), and account address will be set as receiver. If no sender address is specified, the account address will automatically be set as the sender(caller) and receiver.'
        :param str enabled_dex_ids: ID of dexes that can be accessed through dexList endpoint
        :param str disabled_dex_ids: ID of dexes that can be accessed through dexList endpoint
        :param str referrer: The wallet address used to be mark as partners and receive an extra referrerFee from user.
        :param str referrer_fee: Specify the percentage of in-token you wish to receive from the transaction, within the range of 0% to 3%, with 1% represented as '1'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_swap_swap_quote_with_http_info(chain, in_token_address, out_token_address, amount, slippage, gas_price, account, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_swap_swap_quote_with_http_info(chain, in_token_address, out_token_address, amount, slippage, gas_price, account, **kwargs)  # noqa: E501
            return data

    def controller_swap_swap_quote_with_http_info(self, chain, in_token_address, out_token_address, amount, slippage, gas_price, account, **kwargs):  # noqa: E501
        """swap_quote   # noqa: E501

        get swap data   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_swap_swap_quote_with_http_info(chain, in_token_address, out_token_address, amount, slippage, gas_price, account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:bsc support chains: https://docs.openocean.finance/dev/supported-chains  (required)
        :param str in_token_address: eg:0x55d398326f99059ff775485246999027b3197955 you want to sell token address  (required)
        :param str out_token_address: eg:0x8ac76a51cc950d9822d68b83fe1ad97b32cd580d you want to buy token address  (required)
        :param str amount: eg: 1 token amount without decimals  (required)
        :param str slippage: eg: 1 1% means 1, max 50  (required)
        :param str gas_price: eg: 5 without decimals  (required)
        :param str account: eg: 0x000... user's wallet address  (required)
        :param str sender: The caller address.  Token Delivery Logic If a sender address is specified,   the sender address will be set as sender(caller), and account address will be set as receiver. If no sender address is specified, the account address will automatically be set as the sender(caller) and receiver.'
        :param str enabled_dex_ids: ID of dexes that can be accessed through dexList endpoint
        :param str disabled_dex_ids: ID of dexes that can be accessed through dexList endpoint
        :param str referrer: The wallet address used to be mark as partners and receive an extra referrerFee from user.
        :param str referrer_fee: Specify the percentage of in-token you wish to receive from the transaction, within the range of 0% to 3%, with 1% represented as '1'.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain', 'in_token_address', 'out_token_address', 'amount', 'slippage', 'gas_price', 'account', 'sender', 'enabled_dex_ids', 'disabled_dex_ids', 'referrer', 'referrer_fee']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_swap_swap_quote" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_swap_swap_quote`")  # noqa: E501
        # verify the required parameter 'in_token_address' is set
        if self.api_client.client_side_validation and ('in_token_address' not in params or
                                                       params['in_token_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `in_token_address` when calling `controller_swap_swap_quote`")  # noqa: E501
        # verify the required parameter 'out_token_address' is set
        if self.api_client.client_side_validation and ('out_token_address' not in params or
                                                       params['out_token_address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `out_token_address` when calling `controller_swap_swap_quote`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if self.api_client.client_side_validation and ('amount' not in params or
                                                       params['amount'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `amount` when calling `controller_swap_swap_quote`")  # noqa: E501
        # verify the required parameter 'slippage' is set
        if self.api_client.client_side_validation and ('slippage' not in params or
                                                       params['slippage'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `slippage` when calling `controller_swap_swap_quote`")  # noqa: E501
        # verify the required parameter 'gas_price' is set
        if self.api_client.client_side_validation and ('gas_price' not in params or
                                                       params['gas_price'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `gas_price` when calling `controller_swap_swap_quote`")  # noqa: E501
        # verify the required parameter 'account' is set
        if self.api_client.client_side_validation and ('account' not in params or
                                                       params['account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account` when calling `controller_swap_swap_quote`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []
        if 'in_token_address' in params:
            query_params.append(('inTokenAddress', params['in_token_address']))  # noqa: E501
        if 'out_token_address' in params:
            query_params.append(('outTokenAddress', params['out_token_address']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501
        if 'slippage' in params:
            query_params.append(('slippage', params['slippage']))  # noqa: E501
        if 'gas_price' in params:
            query_params.append(('gasPrice', params['gas_price']))  # noqa: E501
        if 'account' in params:
            query_params.append(('account', params['account']))  # noqa: E501
        if 'sender' in params:
            query_params.append(('sender', params['sender']))  # noqa: E501
        if 'enabled_dex_ids' in params:
            query_params.append(('enabledDexIds', params['enabled_dex_ids']))  # noqa: E501
        if 'disabled_dex_ids' in params:
            query_params.append(('disabledDexIds', params['disabled_dex_ids']))  # noqa: E501
        if 'referrer' in params:
            query_params.append(('referrer', params['referrer']))  # noqa: E501
        if 'referrer_fee' in params:
            query_params.append(('referrerFee', params['referrer_fee']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/v3/{chain}/swap_quote', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_swap_token_list(self, chain, **kwargs):  # noqa: E501
        """tokenList   # noqa: E501

        get chain token list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_swap_token_list(chain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:bsc support chains: https://docs.openocean.finance/dev/supported-chains  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_swap_token_list_with_http_info(chain, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_swap_token_list_with_http_info(chain, **kwargs)  # noqa: E501
            return data

    def controller_swap_token_list_with_http_info(self, chain, **kwargs):  # noqa: E501
        """tokenList   # noqa: E501

        get chain token list   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_swap_token_list_with_http_info(chain, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str chain: eg:bsc support chains: https://docs.openocean.finance/dev/supported-chains  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_swap_token_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain' is set
        if self.api_client.client_side_validation and ('chain' not in params or
                                                       params['chain'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain` when calling `controller_swap_token_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'chain' in params:
            path_params['chain'] = params['chain']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/v3/{chain}/tokenList', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
