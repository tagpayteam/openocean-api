# coding: utf-8

"""
    OpenOcean-Api

    OpenOcean Swagger API Spec  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from openocean_api.api_client import ApiClient


class CrossApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def controller_cross_get_cross_status(self, chain_id, hash, **kwargs):  # noqa: E501
        """get cross status   # noqa: E501

        query demo   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_cross_get_cross_status(chain_id, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float chain_id: eg:56 chainId  (required)
        :param str hash: eg:0xb6a66f9676ed430407bc8b96063c8aab5ca663c45ec5d63047ade44061475e4a  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_cross_get_cross_status_with_http_info(chain_id, hash, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_cross_get_cross_status_with_http_info(chain_id, hash, **kwargs)  # noqa: E501
            return data

    def controller_cross_get_cross_status_with_http_info(self, chain_id, hash, **kwargs):  # noqa: E501
        """get cross status   # noqa: E501

        query demo   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_cross_get_cross_status_with_http_info(chain_id, hash, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float chain_id: eg:56 chainId  (required)
        :param str hash: eg:0xb6a66f9676ed430407bc8b96063c8aab5ca663c45ec5d63047ade44061475e4a  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['chain_id', 'hash']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_cross_get_cross_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'chain_id' is set
        if self.api_client.client_side_validation and ('chain_id' not in params or
                                                       params['chain_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `chain_id` when calling `controller_cross_get_cross_status`")  # noqa: E501
        # verify the required parameter 'hash' is set
        if self.api_client.client_side_validation and ('hash' not in params or
                                                       params['hash'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `hash` when calling `controller_cross_get_cross_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'chain_id' in params:
            query_params.append(('chainId', params['chain_id']))  # noqa: E501
        if 'hash' in params:
            query_params.append(('hash', params['hash']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/cross_chain/v1/cross/getCrossStatus', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_cross_get_cross_transaction(self, account, **kwargs):  # noqa: E501
        """get cross transaction   # noqa: E501

        query demo   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_cross_get_cross_transaction(account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account: user address  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_cross_get_cross_transaction_with_http_info(account, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_cross_get_cross_transaction_with_http_info(account, **kwargs)  # noqa: E501
            return data

    def controller_cross_get_cross_transaction_with_http_info(self, account, **kwargs):  # noqa: E501
        """get cross transaction   # noqa: E501

        query demo   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_cross_get_cross_transaction_with_http_info(account, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account: user address  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_cross_get_cross_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account' is set
        if self.api_client.client_side_validation and ('account' not in params or
                                                       params['account'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `account` when calling `controller_cross_get_cross_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'account' in params:
            query_params.append(('account', params['account']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/cross_chain/v1/cross/getCrossTransaction', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_cross_min_send(self, from_chain_id, to_chain_id, address, **kwargs):  # noqa: E501
        """get min send   # noqa: E501

        query demo   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_cross_min_send(from_chain_id, to_chain_id, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float from_chain_id: source_chain  (required)
        :param float to_chain_id: dst_chain  (required)
        :param str address: eg: 0x55d398326f99059ff775485246999027b3197955 token address  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_cross_min_send_with_http_info(from_chain_id, to_chain_id, address, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_cross_min_send_with_http_info(from_chain_id, to_chain_id, address, **kwargs)  # noqa: E501
            return data

    def controller_cross_min_send_with_http_info(self, from_chain_id, to_chain_id, address, **kwargs):  # noqa: E501
        """get min send   # noqa: E501

        query demo   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_cross_min_send_with_http_info(from_chain_id, to_chain_id, address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float from_chain_id: source_chain  (required)
        :param float to_chain_id: dst_chain  (required)
        :param str address: eg: 0x55d398326f99059ff775485246999027b3197955 token address  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_chain_id', 'to_chain_id', 'address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_cross_min_send" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_chain_id' is set
        if self.api_client.client_side_validation and ('from_chain_id' not in params or
                                                       params['from_chain_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `from_chain_id` when calling `controller_cross_min_send`")  # noqa: E501
        # verify the required parameter 'to_chain_id' is set
        if self.api_client.client_side_validation and ('to_chain_id' not in params or
                                                       params['to_chain_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_chain_id` when calling `controller_cross_min_send`")  # noqa: E501
        # verify the required parameter 'address' is set
        if self.api_client.client_side_validation and ('address' not in params or
                                                       params['address'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `address` when calling `controller_cross_min_send`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_chain_id' in params:
            query_params.append(('fromChainId', params['from_chain_id']))  # noqa: E501
        if 'to_chain_id' in params:
            query_params.append(('toChainId', params['to_chain_id']))  # noqa: E501
        if 'address' in params:
            query_params.append(('address', params['address']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/cross_chain/v1/cross/getMinSend', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def controller_cross_quote_by_oo(self, from_chain_id, to_chain_id, from_symbol, to_symbol, amount, **kwargs):  # noqa: E501
        """cross route   # noqa: E501

        query demo   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_cross_quote_by_oo(from_chain_id, to_chain_id, from_symbol, to_symbol, amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float from_chain_id: eg:56 source chain  (required)
        :param float to_chain_id: eg:137 dst chain  (required)
        :param str from_symbol: eg:USDT source chain token symbol  (required)
        :param str to_symbol: eg:USDT dst chain token symbol  (required)
        :param str amount: eg: 100000000 with decimals, 100 decimals is 6, amount 100000000  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.controller_cross_quote_by_oo_with_http_info(from_chain_id, to_chain_id, from_symbol, to_symbol, amount, **kwargs)  # noqa: E501
        else:
            (data) = self.controller_cross_quote_by_oo_with_http_info(from_chain_id, to_chain_id, from_symbol, to_symbol, amount, **kwargs)  # noqa: E501
            return data

    def controller_cross_quote_by_oo_with_http_info(self, from_chain_id, to_chain_id, from_symbol, to_symbol, amount, **kwargs):  # noqa: E501
        """cross route   # noqa: E501

        query demo   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.controller_cross_quote_by_oo_with_http_info(from_chain_id, to_chain_id, from_symbol, to_symbol, amount, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float from_chain_id: eg:56 source chain  (required)
        :param float to_chain_id: eg:137 dst chain  (required)
        :param str from_symbol: eg:USDT source chain token symbol  (required)
        :param str to_symbol: eg:USDT dst chain token symbol  (required)
        :param str amount: eg: 100000000 with decimals, 100 decimals is 6, amount 100000000  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['from_chain_id', 'to_chain_id', 'from_symbol', 'to_symbol', 'amount']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method controller_cross_quote_by_oo" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'from_chain_id' is set
        if self.api_client.client_side_validation and ('from_chain_id' not in params or
                                                       params['from_chain_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `from_chain_id` when calling `controller_cross_quote_by_oo`")  # noqa: E501
        # verify the required parameter 'to_chain_id' is set
        if self.api_client.client_side_validation and ('to_chain_id' not in params or
                                                       params['to_chain_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_chain_id` when calling `controller_cross_quote_by_oo`")  # noqa: E501
        # verify the required parameter 'from_symbol' is set
        if self.api_client.client_side_validation and ('from_symbol' not in params or
                                                       params['from_symbol'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `from_symbol` when calling `controller_cross_quote_by_oo`")  # noqa: E501
        # verify the required parameter 'to_symbol' is set
        if self.api_client.client_side_validation and ('to_symbol' not in params or
                                                       params['to_symbol'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `to_symbol` when calling `controller_cross_quote_by_oo`")  # noqa: E501
        # verify the required parameter 'amount' is set
        if self.api_client.client_side_validation and ('amount' not in params or
                                                       params['amount'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `amount` when calling `controller_cross_quote_by_oo`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'from_chain_id' in params:
            query_params.append(('fromChainId', params['from_chain_id']))  # noqa: E501
        if 'to_chain_id' in params:
            query_params.append(('toChainId', params['to_chain_id']))  # noqa: E501
        if 'from_symbol' in params:
            query_params.append(('fromSymbol', params['from_symbol']))  # noqa: E501
        if 'to_symbol' in params:
            query_params.append(('toSymbol', params['to_symbol']))  # noqa: E501
        if 'amount' in params:
            query_params.append(('amount', params['amount']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            f'/cross_chain/v1/cross/quoteByOO', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', False),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
